
uart_shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08005568  08005568  00006568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056bc  080056bc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080056bc  080056bc  000066bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c4  080056c4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c4  080056c4  000066c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056c8  080056c8  000066c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080056cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000484  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000490  20000490  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eacb  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b3  00000000  00000000  00015b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  000180c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008bd  00000000  00000000  00018c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021136  00000000  00000000  000194f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e95b  00000000  00000000  0003a62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6d5b  00000000  00000000  00048f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010fce1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fa4  00000000  00000000  0010fd24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00112cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005550 	.word	0x08005550

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005550 	.word	0x08005550

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fc7d 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f8cb 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f95d 	bl	80007a8 <MX_GPIO_Init>
//  MX_USB_HOST_Init();
  MX_USART2_UART_Init();
 80004ee:	f000 f931 	bl	8000754 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  display_init_screen();
 80004f2:	f000 fabb 	bl	8000a6c <display_init_screen>
  display_menu(MAIN_MENU);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 fa96 	bl	8000a28 <display_menu>
  while (1)
  {
//	  if(get_options() == '1')
//		  HAL_UART_Transmit(&huart2, (uint8_t *)option, 8, HAL_MAX_DELAY);
    /* USER CODE END WHILE */
	  switch(get_options())
 80004fc:	f000 fad4 	bl	8000aa8 <get_options>
 8000500:	4603      	mov	r3, r0
 8000502:	2b33      	cmp	r3, #51	@ 0x33
 8000504:	f000 8098 	beq.w	8000638 <main+0x15c>
 8000508:	2b33      	cmp	r3, #51	@ 0x33
 800050a:	dcf7      	bgt.n	80004fc <main+0x20>
 800050c:	2b31      	cmp	r3, #49	@ 0x31
 800050e:	d003      	beq.n	8000518 <main+0x3c>
 8000510:	2b32      	cmp	r3, #50	@ 0x32
 8000512:	f000 8089 	beq.w	8000628 <main+0x14c>
 8000516:	e7f1      	b.n	80004fc <main+0x20>
	  {
	  	  case '1':
	  		  post_reply("\n\n\rLED Turned ON\n\rWrite your message and tell us what you want to do\n\r");
 8000518:	484c      	ldr	r0, [pc, #304]	@ (800064c <main+0x170>)
 800051a:	f000 fae9 	bl	8000af0 <post_reply>
	  		  while(1)
	  		  {
	  			  char *recv_data = get_reply();
 800051e:	f000 fb01 	bl	8000b24 <get_reply>
 8000522:	6078      	str	r0, [r7, #4]
				  if(!strcmp(recv_data, "turn on green led\r\n"))		//command - turn on green led
 8000524:	494a      	ldr	r1, [pc, #296]	@ (8000650 <main+0x174>)
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff fe4e 	bl	80001c8 <strcmp>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d106      	bne.n	8000540 <main+0x64>
					  HAL_GPIO_WritePin(GPIOD, GREEN_LED, PIN_HIGH);
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000538:	4846      	ldr	r0, [pc, #280]	@ (8000654 <main+0x178>)
 800053a:	f001 f827 	bl	800158c <HAL_GPIO_WritePin>
 800053e:	e7ee      	b.n	800051e <main+0x42>
				  else if(!strcmp(recv_data, "turn on orange led\r\n"))
 8000540:	4945      	ldr	r1, [pc, #276]	@ (8000658 <main+0x17c>)
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f7ff fe40 	bl	80001c8 <strcmp>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d106      	bne.n	800055c <main+0x80>
					  HAL_GPIO_WritePin(GPIOD, ORANGE_LED, PIN_HIGH);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000554:	483f      	ldr	r0, [pc, #252]	@ (8000654 <main+0x178>)
 8000556:	f001 f819 	bl	800158c <HAL_GPIO_WritePin>
 800055a:	e7e0      	b.n	800051e <main+0x42>
				  else if(!strcmp(recv_data, "turn on red led\r\n"))
 800055c:	493f      	ldr	r1, [pc, #252]	@ (800065c <main+0x180>)
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f7ff fe32 	bl	80001c8 <strcmp>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d106      	bne.n	8000578 <main+0x9c>
					  HAL_GPIO_WritePin(GPIOD, RED_LED, PIN_HIGH);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000570:	4838      	ldr	r0, [pc, #224]	@ (8000654 <main+0x178>)
 8000572:	f001 f80b 	bl	800158c <HAL_GPIO_WritePin>
 8000576:	e7d2      	b.n	800051e <main+0x42>
				  else if(!strcmp(recv_data, "turn on blue led\r\n\n"))
 8000578:	4939      	ldr	r1, [pc, #228]	@ (8000660 <main+0x184>)
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f7ff fe24 	bl	80001c8 <strcmp>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d106      	bne.n	8000594 <main+0xb8>
				  	  HAL_GPIO_WritePin(GPIOD, BLUE_LED, PIN_HIGH);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800058c:	4831      	ldr	r0, [pc, #196]	@ (8000654 <main+0x178>)
 800058e:	f000 fffd 	bl	800158c <HAL_GPIO_WritePin>
 8000592:	e7c4      	b.n	800051e <main+0x42>
				  else if(!strcmp(recv_data, "blink all led\r\n"))
 8000594:	4933      	ldr	r1, [pc, #204]	@ (8000664 <main+0x188>)
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff fe16 	bl	80001c8 <strcmp>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1bd      	bne.n	800051e <main+0x42>
				  {
					  while(receptionComplete == false)
 80005a2:	e039      	b.n	8000618 <main+0x13c>
					  {
						  HAL_UART_Receive_IT(&huart2, data_buffer, 50);
 80005a4:	2232      	movs	r2, #50	@ 0x32
 80005a6:	4930      	ldr	r1, [pc, #192]	@ (8000668 <main+0x18c>)
 80005a8:	4830      	ldr	r0, [pc, #192]	@ (800066c <main+0x190>)
 80005aa:	f003 fbd3 	bl	8003d54 <HAL_UART_Receive_IT>
						  if(received_data[0] == 's')
 80005ae:	4b30      	ldr	r3, [pc, #192]	@ (8000670 <main+0x194>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b73      	cmp	r3, #115	@ 0x73
 80005b4:	d118      	bne.n	80005e8 <main+0x10c>
						  {
							  HAL_GPIO_WritePin(GPIOD, GREEN_LED, PIN_LOW);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005bc:	4825      	ldr	r0, [pc, #148]	@ (8000654 <main+0x178>)
 80005be:	f000 ffe5 	bl	800158c <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOD, RED_LED, PIN_LOW);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005c8:	4822      	ldr	r0, [pc, #136]	@ (8000654 <main+0x178>)
 80005ca:	f000 ffdf 	bl	800158c <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOD, BLUE_LED, PIN_LOW);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005d4:	481f      	ldr	r0, [pc, #124]	@ (8000654 <main+0x178>)
 80005d6:	f000 ffd9 	bl	800158c <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOD, ORANGE_LED, PIN_LOW);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e0:	481c      	ldr	r0, [pc, #112]	@ (8000654 <main+0x178>)
 80005e2:	f000 ffd3 	bl	800158c <HAL_GPIO_WritePin>
							  break;
 80005e6:	e01e      	b.n	8000626 <main+0x14a>
						  }
						  HAL_GPIO_TogglePin(GPIOD, GREEN_LED);
 80005e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ec:	4819      	ldr	r0, [pc, #100]	@ (8000654 <main+0x178>)
 80005ee:	f000 ffe6 	bl	80015be <HAL_GPIO_TogglePin>
						  HAL_GPIO_TogglePin(GPIOD, RED_LED);
 80005f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005f6:	4817      	ldr	r0, [pc, #92]	@ (8000654 <main+0x178>)
 80005f8:	f000 ffe1 	bl	80015be <HAL_GPIO_TogglePin>
						  HAL_GPIO_TogglePin(GPIOD, BLUE_LED);
 80005fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000600:	4814      	ldr	r0, [pc, #80]	@ (8000654 <main+0x178>)
 8000602:	f000 ffdc 	bl	80015be <HAL_GPIO_TogglePin>
						  HAL_GPIO_TogglePin(GPIOD, ORANGE_LED);
 8000606:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800060a:	4812      	ldr	r0, [pc, #72]	@ (8000654 <main+0x178>)
 800060c:	f000 ffd7 	bl	80015be <HAL_GPIO_TogglePin>
						  HAL_Delay(1000);
 8000610:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000614:	f000 fc56 	bl	8000ec4 <HAL_Delay>
					  while(receptionComplete == false)
 8000618:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <main+0x198>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	f083 0301 	eor.w	r3, r3, #1
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d1be      	bne.n	80005a4 <main+0xc8>
	  		  {
 8000626:	e77a      	b.n	800051e <main+0x42>
	  		  	  HAL_GPIO_WritePin(GPIOD, LD5_Pin, PIN_HIGH);
	  		  	  HAL_GPIO_WritePin(GPIOD, LD6_Pin, PIN_HIGH);
	  		  }
	  		  break;
	  	  case '2':
	  		  HAL_UART_Transmit(&huart2, (uint8_t*)"Option 2", 8, HAL_MAX_DELAY);
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	2208      	movs	r2, #8
 800062e:	4912      	ldr	r1, [pc, #72]	@ (8000678 <main+0x19c>)
 8000630:	480e      	ldr	r0, [pc, #56]	@ (800066c <main+0x190>)
 8000632:	f003 fa6d 	bl	8003b10 <HAL_UART_Transmit>
	  		  break;
 8000636:	e007      	b.n	8000648 <main+0x16c>
	  	  case '3':
	  		  HAL_UART_Transmit(&huart2, (uint8_t*)"Option 3", 8, HAL_MAX_DELAY);
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	2208      	movs	r2, #8
 800063e:	490f      	ldr	r1, [pc, #60]	@ (800067c <main+0x1a0>)
 8000640:	480a      	ldr	r0, [pc, #40]	@ (800066c <main+0x190>)
 8000642:	f003 fa65 	bl	8003b10 <HAL_UART_Transmit>
	  		  break;
 8000646:	bf00      	nop
	  switch(get_options())
 8000648:	e758      	b.n	80004fc <main+0x20>
 800064a:	bf00      	nop
 800064c:	08005568 	.word	0x08005568
 8000650:	080055b0 	.word	0x080055b0
 8000654:	40020c00 	.word	0x40020c00
 8000658:	080055c4 	.word	0x080055c4
 800065c:	080055dc 	.word	0x080055dc
 8000660:	080055f0 	.word	0x080055f0
 8000664:	08005604 	.word	0x08005604
 8000668:	200000a8 	.word	0x200000a8
 800066c:	2000002c 	.word	0x2000002c
 8000670:	20000074 	.word	0x20000074
 8000674:	20000028 	.word	0x20000028
 8000678:	08005614 	.word	0x08005614
 800067c:	08005620 	.word	0x08005620

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	@ 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 ff32 	bl	80054f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b28      	ldr	r3, [pc, #160]	@ (800074c <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	4a27      	ldr	r2, [pc, #156]	@ (800074c <SystemClock_Config+0xcc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b4:	4b25      	ldr	r3, [pc, #148]	@ (800074c <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <SystemClock_Config+0xd0>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fd1a 	bl	8003140 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000712:	f000 fa65 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000722:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000728:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2105      	movs	r1, #5
 8000734:	4618      	mov	r0, r3
 8000736:	f002 ff7b 	bl	8003630 <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000740:	f000 fa4e 	bl	8000be0 <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3750      	adds	r7, #80	@ 0x50
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <MX_USART2_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 800078c:	f003 f970 	bl	8003a70 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 fa23 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000002c 	.word	0x2000002c
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	@ 0x30
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
 80007c2:	4b93      	ldr	r3, [pc, #588]	@ (8000a10 <MX_GPIO_Init+0x268>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a92      	ldr	r2, [pc, #584]	@ (8000a10 <MX_GPIO_Init+0x268>)
 80007c8:	f043 0310 	orr.w	r3, r3, #16
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b90      	ldr	r3, [pc, #576]	@ (8000a10 <MX_GPIO_Init+0x268>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0310 	and.w	r3, r3, #16
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	4b8c      	ldr	r3, [pc, #560]	@ (8000a10 <MX_GPIO_Init+0x268>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a8b      	ldr	r2, [pc, #556]	@ (8000a10 <MX_GPIO_Init+0x268>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b89      	ldr	r3, [pc, #548]	@ (8000a10 <MX_GPIO_Init+0x268>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b85      	ldr	r3, [pc, #532]	@ (8000a10 <MX_GPIO_Init+0x268>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a84      	ldr	r2, [pc, #528]	@ (8000a10 <MX_GPIO_Init+0x268>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b82      	ldr	r3, [pc, #520]	@ (8000a10 <MX_GPIO_Init+0x268>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b7e      	ldr	r3, [pc, #504]	@ (8000a10 <MX_GPIO_Init+0x268>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a7d      	ldr	r2, [pc, #500]	@ (8000a10 <MX_GPIO_Init+0x268>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b7b      	ldr	r3, [pc, #492]	@ (8000a10 <MX_GPIO_Init+0x268>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b77      	ldr	r3, [pc, #476]	@ (8000a10 <MX_GPIO_Init+0x268>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a76      	ldr	r2, [pc, #472]	@ (8000a10 <MX_GPIO_Init+0x268>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b74      	ldr	r3, [pc, #464]	@ (8000a10 <MX_GPIO_Init+0x268>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b70      	ldr	r3, [pc, #448]	@ (8000a10 <MX_GPIO_Init+0x268>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a6f      	ldr	r2, [pc, #444]	@ (8000a10 <MX_GPIO_Init+0x268>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b6d      	ldr	r3, [pc, #436]	@ (8000a10 <MX_GPIO_Init+0x268>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2108      	movs	r1, #8
 800086a:	486a      	ldr	r0, [pc, #424]	@ (8000a14 <MX_GPIO_Init+0x26c>)
 800086c:	f000 fe8e 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2101      	movs	r1, #1
 8000874:	4868      	ldr	r0, [pc, #416]	@ (8000a18 <MX_GPIO_Init+0x270>)
 8000876:	f000 fe89 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800087a:	2200      	movs	r2, #0
 800087c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000880:	4866      	ldr	r0, [pc, #408]	@ (8000a1c <MX_GPIO_Init+0x274>)
 8000882:	f000 fe83 	bl	800158c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000886:	2308      	movs	r3, #8
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	485d      	ldr	r0, [pc, #372]	@ (8000a14 <MX_GPIO_Init+0x26c>)
 800089e:	f000 fcd9 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4857      	ldr	r0, [pc, #348]	@ (8000a18 <MX_GPIO_Init+0x270>)
 80008ba:	f000 fccb 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008be:	2308      	movs	r3, #8
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ce:	2305      	movs	r3, #5
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	484f      	ldr	r0, [pc, #316]	@ (8000a18 <MX_GPIO_Init+0x270>)
 80008da:	f000 fcbb 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008de:	2301      	movs	r3, #1
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	484b      	ldr	r0, [pc, #300]	@ (8000a20 <MX_GPIO_Init+0x278>)
 80008f4:	f000 fcae 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008f8:	2310      	movs	r3, #16
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000908:	2306      	movs	r3, #6
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4843      	ldr	r0, [pc, #268]	@ (8000a20 <MX_GPIO_Init+0x278>)
 8000914:	f000 fc9e 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000918:	23e0      	movs	r3, #224	@ 0xe0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000928:	2305      	movs	r3, #5
 800092a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	483b      	ldr	r0, [pc, #236]	@ (8000a20 <MX_GPIO_Init+0x278>)
 8000934:	f000 fc8e 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000938:	2304      	movs	r3, #4
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4836      	ldr	r0, [pc, #216]	@ (8000a24 <MX_GPIO_Init+0x27c>)
 800094c:	f000 fc82 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000950:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000962:	2305      	movs	r3, #5
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	482d      	ldr	r0, [pc, #180]	@ (8000a24 <MX_GPIO_Init+0x27c>)
 800096e:	f000 fc71 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000972:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000976:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4824      	ldr	r0, [pc, #144]	@ (8000a1c <MX_GPIO_Init+0x274>)
 800098c:	f000 fc62 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000990:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009a2:	2306      	movs	r3, #6
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	481a      	ldr	r0, [pc, #104]	@ (8000a18 <MX_GPIO_Init+0x270>)
 80009ae:	f000 fc51 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b2:	2320      	movs	r3, #32
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4815      	ldr	r0, [pc, #84]	@ (8000a1c <MX_GPIO_Init+0x274>)
 80009c6:	f000 fc45 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ca:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d0:	2312      	movs	r3, #18
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009dc:	2304      	movs	r3, #4
 80009de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	480f      	ldr	r0, [pc, #60]	@ (8000a24 <MX_GPIO_Init+0x27c>)
 80009e8:	f000 fc34 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_GPIO_Init+0x26c>)
 8000a02:	f000 fc27 	bl	8001254 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	@ 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400

08000a28 <display_menu>:

/* USER CODE BEGIN 4 */
void display_menu(uint8_t select_menu)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	char *options;
	if(select_menu == MAIN_MENU)
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d101      	bne.n	8000a3c <display_menu+0x14>
	{
		options = "\r1)\tTurn On Lights\n\r";
 8000a38:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <display_menu+0x3c>)
 8000a3a:	60fb      	str	r3, [r7, #12]
	}

	if(HAL_UART_Transmit(&huart2, (uint8_t*)options, strlen(options), HAL_MAX_DELAY)!= HAL_OK)
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f7ff fbcd 	bl	80001dc <strlen>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	68f9      	ldr	r1, [r7, #12]
 8000a4c:	4806      	ldr	r0, [pc, #24]	@ (8000a68 <display_menu+0x40>)
 8000a4e:	f003 f85f 	bl	8003b10 <HAL_UART_Transmit>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <display_menu+0x34>
		  Error_Handler();
 8000a58:	f000 f8c2 	bl	8000be0 <Error_Handler>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	0800562c 	.word	0x0800562c
 8000a68:	2000002c 	.word	0x2000002c

08000a6c <display_init_screen>:

void display_init_screen()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	char *shellStart;
	shellStart = "\rHi,\n"
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <display_init_screen+0x34>)
 8000a74:	607b      	str	r3, [r7, #4]
				"\rWelcome to UART Shell.\n"
				"\rMy name is Mr.Disc and tell me what do you want to do today?\n\r";

	if(HAL_UART_Transmit(&huart2, (uint8_t*)shellStart, strlen(shellStart), HAL_MAX_DELAY)!= HAL_OK)
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff fbb0 	bl	80001dc <strlen>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	4807      	ldr	r0, [pc, #28]	@ (8000aa4 <display_init_screen+0x38>)
 8000a88:	f003 f842 	bl	8003b10 <HAL_UART_Transmit>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <display_init_screen+0x2a>
		  Error_Handler();
 8000a92:	f000 f8a5 	bl	8000be0 <Error_Handler>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	08005644 	.word	0x08005644
 8000aa4:	2000002c 	.word	0x2000002c

08000aa8 <get_options>:

char get_options()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	uint8_t recv_data;
	int i = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
	while(1)
	{
		HAL_UART_Receive(&huart2, &recv_data, 1, HAL_MAX_DELAY);
 8000ab2:	1cf9      	adds	r1, r7, #3
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab8:	2201      	movs	r2, #1
 8000aba:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <get_options+0x40>)
 8000abc:	f003 f8b3 	bl	8003c26 <HAL_UART_Receive>
		if(recv_data == '\r')
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	2b0d      	cmp	r3, #13
 8000ac4:	d006      	beq.n	8000ad4 <get_options+0x2c>
			break;
		else
			received_data[i] = recv_data;
 8000ac6:	78f9      	ldrb	r1, [r7, #3]
 8000ac8:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <get_options+0x44>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	460a      	mov	r2, r1
 8000ad0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive(&huart2, &recv_data, 1, HAL_MAX_DELAY);
 8000ad2:	e7ee      	b.n	8000ab2 <get_options+0xa>
			break;
 8000ad4:	bf00      	nop
	}

	return received_data[i];
 8000ad6:	4a05      	ldr	r2, [pc, #20]	@ (8000aec <get_options+0x44>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4413      	add	r3, r2
 8000adc:	781b      	ldrb	r3, [r3, #0]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000002c 	.word	0x2000002c
 8000aec:	20000074 	.word	0x20000074

08000af0 <post_reply>:

void post_reply(char *message)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY) != HAL_OK)
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff fb6f 	bl	80001dc <strlen>
 8000afe:	4603      	mov	r3, r0
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <post_reply+0x30>)
 8000b0a:	f003 f801 	bl	8003b10 <HAL_UART_Transmit>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <post_reply+0x28>
		Error_Handler();
 8000b14:	f000 f864 	bl	8000be0 <Error_Handler>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000002c 	.word	0x2000002c

08000b24 <get_reply>:

char *get_reply()
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
	uint8_t recv_data;
	int i = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
	while(1)
	{
		HAL_UART_Receive(&huart2, &recv_data, 1, HAL_MAX_DELAY);
 8000b2e:	1cf9      	adds	r1, r7, #3
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	2201      	movs	r2, #1
 8000b36:	4817      	ldr	r0, [pc, #92]	@ (8000b94 <get_reply+0x70>)
 8000b38:	f003 f875 	bl	8003c26 <HAL_UART_Receive>
		if(recv_data == '\r'){
 8000b3c:	78fb      	ldrb	r3, [r7, #3]
 8000b3e:	2b0d      	cmp	r3, #13
 8000b40:	d11a      	bne.n	8000b78 <get_reply+0x54>
			received_data[i++] = recv_data;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	1c5a      	adds	r2, r3, #1
 8000b46:	607a      	str	r2, [r7, #4]
 8000b48:	78f9      	ldrb	r1, [r7, #3]
 8000b4a:	4a13      	ldr	r2, [pc, #76]	@ (8000b98 <get_reply+0x74>)
 8000b4c:	54d1      	strb	r1, [r2, r3]
			break;}
 8000b4e:	bf00      	nop
		else
			received_data[i++] = recv_data;
	}
	received_data[i] = '\n';
 8000b50:	4a11      	ldr	r2, [pc, #68]	@ (8000b98 <get_reply+0x74>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	220a      	movs	r2, #10
 8000b58:	701a      	strb	r2, [r3, #0]

	if(HAL_UART_Transmit(&huart2, received_data, strlen((char*)received_data), HAL_MAX_DELAY) != HAL_OK)
 8000b5a:	480f      	ldr	r0, [pc, #60]	@ (8000b98 <get_reply+0x74>)
 8000b5c:	f7ff fb3e 	bl	80001dc <strlen>
 8000b60:	4603      	mov	r3, r0
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	490b      	ldr	r1, [pc, #44]	@ (8000b98 <get_reply+0x74>)
 8000b6a:	480a      	ldr	r0, [pc, #40]	@ (8000b94 <get_reply+0x70>)
 8000b6c:	f002 ffd0 	bl	8003b10 <HAL_UART_Transmit>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d009      	beq.n	8000b8a <get_reply+0x66>
 8000b76:	e006      	b.n	8000b86 <get_reply+0x62>
			received_data[i++] = recv_data;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	78f9      	ldrb	r1, [r7, #3]
 8000b80:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <get_reply+0x74>)
 8000b82:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Receive(&huart2, &recv_data, 1, HAL_MAX_DELAY);
 8000b84:	e7d3      	b.n	8000b2e <get_reply+0xa>
		Error_Handler();
 8000b86:	f000 f82b 	bl	8000be0 <Error_Handler>
	return (char*)received_data;
 8000b8a:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <get_reply+0x74>)
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000002c 	.word	0x2000002c
 8000b98:	20000074 	.word	0x20000074

08000b9c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	received_data[0] = data_buffer[0];
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x34>)
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x38>)
 8000baa:	701a      	strb	r2, [r3, #0]
	receptionComplete = true;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <HAL_UART_RxCpltCallback+0x3c>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, received_data, strlen(received_data), HAL_MAX_DELAY);
 8000bb2:	4808      	ldr	r0, [pc, #32]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x38>)
 8000bb4:	f7ff fb12 	bl	80001dc <strlen>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc0:	4904      	ldr	r1, [pc, #16]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x38>)
 8000bc2:	4806      	ldr	r0, [pc, #24]	@ (8000bdc <HAL_UART_RxCpltCallback+0x40>)
 8000bc4:	f002 ffa4 	bl	8003b10 <HAL_UART_Transmit>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200000a8 	.word	0x200000a8
 8000bd4:	20000074 	.word	0x20000074
 8000bd8:	20000028 	.word	0x20000028
 8000bdc:	2000002c 	.word	0x2000002c

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <Error_Handler+0x8>

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c2a:	2007      	movs	r0, #7
 8000c2c:	f000 fa3e 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	@ 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd0 <HAL_UART_MspInit+0x94>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d133      	bne.n	8000cc6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6e:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c96:	230c      	movs	r3, #12
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4809      	ldr	r0, [pc, #36]	@ (8000cd8 <HAL_UART_MspInit+0x9c>)
 8000cb2:	f000 facf 	bl	8001254 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2026      	movs	r0, #38	@ 0x26
 8000cbc:	f000 fa01 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cc0:	2026      	movs	r0, #38	@ 0x26
 8000cc2:	f000 fa1a 	bl	80010fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	@ 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40004400 	.word	0x40004400
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d32:	f000 f8a7 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d40:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <USART2_IRQHandler+0x14>)
 8000d42:	f003 f82d 	bl	8003da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_RxCpltCallback(&huart2);
 8000d46:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <USART2_IRQHandler+0x14>)
 8000d48:	f7ff ff28 	bl	8000b9c <HAL_UART_RxCpltCallback>

  /* USER CODE END USART2_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2000002c 	.word	0x2000002c

08000d54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d58:	4802      	ldr	r0, [pc, #8]	@ (8000d64 <OTG_FS_IRQHandler+0x10>)
 8000d5a:	f000 fc4a 	bl	80015f2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000b0 	.word	0x200000b0

08000d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d90:	f7ff ffea 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	@ (8000dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	@ (8000dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dba:	f004 fba5 	bl	8005508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fb8d 	bl	80004dc <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dd0:	080056cc 	.word	0x080056cc
  ldr r2, =_sbss
 8000dd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dd8:	20000490 	.word	0x20000490

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <HAL_Init+0x40>)
 8000dea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <HAL_Init+0x40>)
 8000df6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	@ (8000e20 <HAL_Init+0x40>)
 8000e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f94f 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff feea 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023c00 	.word	0x40023c00

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f967 	bl	8001116 <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f92f 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	@ (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	200000ac 	.word	0x200000ac

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	@ (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200000ac 	.word	0x200000ac

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4907      	ldr	r1, [pc, #28]	@ (8000fa8 <__NVIC_EnableIRQ+0x38>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	@ (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	@ (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	@ 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	@ 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff29 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff3e 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff8e 	bl	8001000 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5d 	bl	8000fac <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff31 	bl	8000f70 <__NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffa2 	bl	8001068 <SysTick_Config>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff feb6 	bl	8000eac <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d008      	beq.n	8001160 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2280      	movs	r2, #128	@ 0x80
 8001152:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e052      	b.n	8001206 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0216 	bic.w	r2, r2, #22
 800116e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	695a      	ldr	r2, [r3, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800117e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	2b00      	cmp	r3, #0
 8001186:	d103      	bne.n	8001190 <HAL_DMA_Abort+0x62>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800118c:	2b00      	cmp	r3, #0
 800118e:	d007      	beq.n	80011a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0208 	bic.w	r2, r2, #8
 800119e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0201 	bic.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011b0:	e013      	b.n	80011da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011b2:	f7ff fe7b 	bl	8000eac <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b05      	cmp	r3, #5
 80011be:	d90c      	bls.n	80011da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2220      	movs	r2, #32
 80011c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2203      	movs	r2, #3
 80011ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e015      	b.n	8001206 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1e4      	bne.n	80011b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ec:	223f      	movs	r2, #63	@ 0x3f
 80011ee:	409a      	lsls	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d004      	beq.n	800122c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2280      	movs	r2, #128	@ 0x80
 8001226:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e00c      	b.n	8001246 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2205      	movs	r2, #5
 8001230:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	@ 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	e16b      	b.n	8001548 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	429a      	cmp	r2, r3
 800128a:	f040 815a 	bne.w	8001542 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d005      	beq.n	80012a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d130      	bne.n	8001308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f003 0201 	and.w	r2, r3, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b03      	cmp	r3, #3
 8001312:	d017      	beq.n	8001344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d123      	bne.n	8001398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	08da      	lsrs	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3208      	adds	r2, #8
 8001358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	69b9      	ldr	r1, [r7, #24]
 8001394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80b4 	beq.w	8001542 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b60      	ldr	r3, [pc, #384]	@ (8001560 <HAL_GPIO_Init+0x30c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	4a5f      	ldr	r2, [pc, #380]	@ (8001560 <HAL_GPIO_Init+0x30c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001560 <HAL_GPIO_Init+0x30c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001564 <HAL_GPIO_Init+0x310>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a52      	ldr	r2, [pc, #328]	@ (8001568 <HAL_GPIO_Init+0x314>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d02b      	beq.n	800147a <HAL_GPIO_Init+0x226>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a51      	ldr	r2, [pc, #324]	@ (800156c <HAL_GPIO_Init+0x318>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d025      	beq.n	8001476 <HAL_GPIO_Init+0x222>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a50      	ldr	r2, [pc, #320]	@ (8001570 <HAL_GPIO_Init+0x31c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d01f      	beq.n	8001472 <HAL_GPIO_Init+0x21e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4f      	ldr	r2, [pc, #316]	@ (8001574 <HAL_GPIO_Init+0x320>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x21a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4e      	ldr	r2, [pc, #312]	@ (8001578 <HAL_GPIO_Init+0x324>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x216>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4d      	ldr	r2, [pc, #308]	@ (800157c <HAL_GPIO_Init+0x328>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x212>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4c      	ldr	r2, [pc, #304]	@ (8001580 <HAL_GPIO_Init+0x32c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x20e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4b      	ldr	r2, [pc, #300]	@ (8001584 <HAL_GPIO_Init+0x330>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x20a>
 800145a:	2307      	movs	r3, #7
 800145c:	e00e      	b.n	800147c <HAL_GPIO_Init+0x228>
 800145e:	2308      	movs	r3, #8
 8001460:	e00c      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001462:	2306      	movs	r3, #6
 8001464:	e00a      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001466:	2305      	movs	r3, #5
 8001468:	e008      	b.n	800147c <HAL_GPIO_Init+0x228>
 800146a:	2304      	movs	r3, #4
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x228>
 800146e:	2303      	movs	r3, #3
 8001470:	e004      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001472:	2302      	movs	r3, #2
 8001474:	e002      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <HAL_GPIO_Init+0x228>
 800147a:	2300      	movs	r3, #0
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	f002 0203 	and.w	r2, r2, #3
 8001482:	0092      	lsls	r2, r2, #2
 8001484:	4093      	lsls	r3, r2
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800148c:	4935      	ldr	r1, [pc, #212]	@ (8001564 <HAL_GPIO_Init+0x310>)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149a:	4b3b      	ldr	r3, [pc, #236]	@ (8001588 <HAL_GPIO_Init+0x334>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014be:	4a32      	ldr	r2, [pc, #200]	@ (8001588 <HAL_GPIO_Init+0x334>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c4:	4b30      	ldr	r3, [pc, #192]	@ (8001588 <HAL_GPIO_Init+0x334>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e8:	4a27      	ldr	r2, [pc, #156]	@ (8001588 <HAL_GPIO_Init+0x334>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ee:	4b26      	ldr	r3, [pc, #152]	@ (8001588 <HAL_GPIO_Init+0x334>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001512:	4a1d      	ldr	r2, [pc, #116]	@ (8001588 <HAL_GPIO_Init+0x334>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <HAL_GPIO_Init+0x334>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800153c:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <HAL_GPIO_Init+0x334>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3301      	adds	r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	2b0f      	cmp	r3, #15
 800154c:	f67f ae90 	bls.w	8001270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3724      	adds	r7, #36	@ 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	40013800 	.word	0x40013800
 8001568:	40020000 	.word	0x40020000
 800156c:	40020400 	.word	0x40020400
 8001570:	40020800 	.word	0x40020800
 8001574:	40020c00 	.word	0x40020c00
 8001578:	40021000 	.word	0x40021000
 800157c:	40021400 	.word	0x40021400
 8001580:	40021800 	.word	0x40021800
 8001584:	40021c00 	.word	0x40021c00
 8001588:	40013c00 	.word	0x40013c00

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a8:	e003      	b.n	80015b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	041a      	lsls	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	619a      	str	r2, [r3, #24]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015be:	b480      	push	{r7}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d0:	887a      	ldrh	r2, [r7, #2]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4013      	ands	r3, r2
 80015d6:	041a      	lsls	r2, r3, #16
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43d9      	mvns	r1, r3
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	400b      	ands	r3, r1
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	619a      	str	r2, [r3, #24]
}
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fc2d 	bl	8004e68 <USB_GetMode>
 800160e:	4603      	mov	r3, r0
 8001610:	2b01      	cmp	r3, #1
 8001612:	f040 80fb 	bne.w	800180c <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fbf0 	bl	8004e00 <USB_ReadInterrupts>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80f1 	beq.w	800180a <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fbe7 	bl	8004e00 <USB_ReadInterrupts>
 8001632:	4603      	mov	r3, r0
 8001634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001638:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800163c:	d104      	bne.n	8001648 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001646:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fbd7 	bl	8004e00 <USB_ReadInterrupts>
 8001652:	4603      	mov	r3, r0
 8001654:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001658:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800165c:	d104      	bne.n	8001668 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001666:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fbc7 	bl	8004e00 <USB_ReadInterrupts>
 8001672:	4603      	mov	r3, r0
 8001674:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001678:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800167c:	d104      	bne.n	8001688 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001686:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f003 fbb7 	bl	8004e00 <USB_ReadInterrupts>
 8001692:	4603      	mov	r3, r0
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b02      	cmp	r3, #2
 800169a:	d103      	bne.n	80016a4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2202      	movs	r2, #2
 80016a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 fba9 	bl	8004e00 <USB_ReadInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016b8:	d120      	bne.n	80016fc <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80016c2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d113      	bne.n	80016fc <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80016d4:	2110      	movs	r1, #16
 80016d6:	6938      	ldr	r0, [r7, #16]
 80016d8:	f003 fada 	bl	8004c90 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80016dc:	6938      	ldr	r0, [r7, #16]
 80016de:	f003 fb09 	bl	8004cf4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7a5b      	ldrb	r3, [r3, #9]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d105      	bne.n	80016f6 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2101      	movs	r1, #1
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 fbc7 	bl	8004e84 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f003 fe7f 	bl	80053fa <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fb7d 	bl	8004e00 <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001710:	d102      	bne.n	8001718 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f001 fca1 	bl	800305a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f003 fb6f 	bl	8004e00 <USB_ReadInterrupts>
 8001722:	4603      	mov	r3, r0
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b08      	cmp	r3, #8
 800172a:	d106      	bne.n	800173a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f003 fe48 	bl	80053c2 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2208      	movs	r2, #8
 8001738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f003 fb5e 	bl	8004e00 <USB_ReadInterrupts>
 8001744:	4603      	mov	r3, r0
 8001746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800174e:	d139      	bne.n	80017c4 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f003 fbd2 	bl	8004efe <USB_HC_ReadInterrupt>
 800175a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e025      	b.n	80017ae <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	fa22 f303 	lsr.w	r3, r2, r3
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d018      	beq.n	80017a8 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4413      	add	r3, r2
 800177e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800178c:	d106      	bne.n	800179c <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4619      	mov	r1, r3
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f859 	bl	800184c <HCD_HC_IN_IRQHandler>
 800179a:	e005      	b.n	80017a8 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4619      	mov	r1, r3
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 febb 	bl	800251e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	795b      	ldrb	r3, [r3, #5]
 80017b2:	461a      	mov	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d3d3      	bcc.n	8001762 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 fb19 	bl	8004e00 <USB_ReadInterrupts>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b10      	cmp	r3, #16
 80017d6:	d101      	bne.n	80017dc <HAL_HCD_IRQHandler+0x1ea>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <HAL_HCD_IRQHandler+0x1ec>
 80017dc:	2300      	movs	r3, #0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d014      	beq.n	800180c <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	699a      	ldr	r2, [r3, #24]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0210 	bic.w	r2, r2, #16
 80017f0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f001 fb52 	bl	8002e9c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699a      	ldr	r2, [r3, #24]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0210 	orr.w	r2, r2, #16
 8001806:	619a      	str	r2, [r3, #24]
 8001808:	e000      	b.n	800180c <HAL_HCD_IRQHandler+0x21a>
      return;
 800180a:	bf00      	nop
    }
  }
}
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_HCD_Stop+0x16>
 8001824:	2302      	movs	r3, #2
 8001826:	e00d      	b.n	8001844 <HAL_HCD_Stop+0x32>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fc93 	bl	8005160 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f003 fadb 	bl	8004e26 <USB_ReadChInterrupts>
 8001870:	4603      	mov	r3, r0
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b04      	cmp	r3, #4
 8001878:	d11a      	bne.n	80018b0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4413      	add	r3, r2
 8001882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001886:	461a      	mov	r2, r3
 8001888:	2304      	movs	r3, #4
 800188a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	334d      	adds	r3, #77	@ 0x4d
 800189c:	2207      	movs	r2, #7
 800189e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	78fa      	ldrb	r2, [r7, #3]
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 fb39 	bl	8004f20 <USB_HC_Halt>
 80018ae:	e09e      	b.n	80019ee <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 fab4 	bl	8004e26 <USB_ReadChInterrupts>
 80018be:	4603      	mov	r3, r0
 80018c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018c8:	d11b      	bne.n	8001902 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018d6:	461a      	mov	r2, r3
 80018d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	334d      	adds	r3, #77	@ 0x4d
 80018ee:	2208      	movs	r2, #8
 80018f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 fb10 	bl	8004f20 <USB_HC_Halt>
 8001900:	e075      	b.n	80019ee <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	4611      	mov	r1, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f003 fa8b 	bl	8004e26 <USB_ReadChInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b08      	cmp	r3, #8
 8001918:	d11a      	bne.n	8001950 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	015a      	lsls	r2, r3, #5
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4413      	add	r3, r2
 8001922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001926:	461a      	mov	r2, r3
 8001928:	2308      	movs	r3, #8
 800192a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800192c:	78fa      	ldrb	r2, [r7, #3]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	334d      	adds	r3, #77	@ 0x4d
 800193c:	2206      	movs	r2, #6
 800193e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f003 fae9 	bl	8004f20 <USB_HC_Halt>
 800194e:	e04e      	b.n	80019ee <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	78fa      	ldrb	r2, [r7, #3]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f003 fa64 	bl	8004e26 <USB_ReadChInterrupts>
 800195e:	4603      	mov	r3, r0
 8001960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001968:	d11b      	bne.n	80019a2 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	015a      	lsls	r2, r3, #5
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4413      	add	r3, r2
 8001972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001976:	461a      	mov	r2, r3
 8001978:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800197c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	1a9b      	subs	r3, r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	334d      	adds	r3, #77	@ 0x4d
 800198e:	2209      	movs	r2, #9
 8001990:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	78fa      	ldrb	r2, [r7, #3]
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fac0 	bl	8004f20 <USB_HC_Halt>
 80019a0:	e025      	b.n	80019ee <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	78fa      	ldrb	r2, [r7, #3]
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 fa3b 	bl	8004e26 <USB_ReadChInterrupts>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019b6:	2b80      	cmp	r3, #128	@ 0x80
 80019b8:	d119      	bne.n	80019ee <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019c6:	461a      	mov	r2, r3
 80019c8:	2380      	movs	r3, #128	@ 0x80
 80019ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	334d      	adds	r3, #77	@ 0x4d
 80019dc:	2207      	movs	r2, #7
 80019de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 fa99 	bl	8004f20 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	78fa      	ldrb	r2, [r7, #3]
 80019f4:	4611      	mov	r1, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fa15 	bl	8004e26 <USB_ReadChInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a06:	d112      	bne.n	8001a2e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fa85 	bl	8004f20 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a22:	461a      	mov	r2, r3
 8001a24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a28:	6093      	str	r3, [r2, #8]
 8001a2a:	f000 bd75 	b.w	8002518 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 f9f5 	bl	8004e26 <USB_ReadChInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	f040 8128 	bne.w	8001c98 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	015a      	lsls	r2, r3, #5
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a54:	461a      	mov	r2, r3
 8001a56:	2320      	movs	r3, #32
 8001a58:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001a5a:	78fa      	ldrb	r2, [r7, #3]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	331b      	adds	r3, #27
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d119      	bne.n	8001aa4 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	331b      	adds	r3, #27
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	015a      	lsls	r2, r3, #5
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	78fa      	ldrb	r2, [r7, #3]
 8001a94:	0151      	lsls	r1, r2, #5
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	440a      	add	r2, r1
 8001a9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aa2:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	799b      	ldrb	r3, [r3, #6]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d01b      	beq.n	8001ae4 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001aac:	78fa      	ldrb	r2, [r7, #3]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	3330      	adds	r3, #48	@ 0x30
 8001abc:	6819      	ldr	r1, [r3, #0]
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	015a      	lsls	r2, r3, #5
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	1ac9      	subs	r1, r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4403      	add	r3, r0
 8001ae0:	3338      	adds	r3, #56	@ 0x38
 8001ae2:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	334d      	adds	r3, #77	@ 0x4d
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001af8:	78fa      	ldrb	r2, [r7, #3]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	3344      	adds	r3, #68	@ 0x44
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b1e:	78fa      	ldrb	r2, [r7, #3]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	3326      	adds	r3, #38	@ 0x26
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00a      	beq.n	8001b4a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001b34:	78fa      	ldrb	r2, [r7, #3]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	3326      	adds	r3, #38	@ 0x26
 8001b44:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d110      	bne.n	8001b6c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	4611      	mov	r1, r2
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 f9e4 	bl	8004f20 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	015a      	lsls	r2, r3, #5
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4413      	add	r3, r2
 8001b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b64:	461a      	mov	r2, r3
 8001b66:	2310      	movs	r3, #16
 8001b68:	6093      	str	r3, [r2, #8]
 8001b6a:	e03d      	b.n	8001be8 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	3326      	adds	r3, #38	@ 0x26
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d00a      	beq.n	8001b98 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001b82:	78fa      	ldrb	r2, [r7, #3]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	1a9b      	subs	r3, r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	3326      	adds	r3, #38	@ 0x26
 8001b92:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d127      	bne.n	8001be8 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	78fa      	ldrb	r2, [r7, #3]
 8001ba8:	0151      	lsls	r1, r2, #5
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	440a      	add	r2, r1
 8001bae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001bb2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001bb6:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001bb8:	78fa      	ldrb	r2, [r7, #3]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	334c      	adds	r3, #76	@ 0x4c
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	334c      	adds	r3, #76	@ 0x4c
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	4619      	mov	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f003 fc17 	bl	8005416 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	799b      	ldrb	r3, [r3, #6]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d13b      	bne.n	8001c68 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3338      	adds	r3, #56	@ 0x38
 8001c00:	6819      	ldr	r1, [r3, #0]
 8001c02:	78fa      	ldrb	r2, [r7, #3]
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4403      	add	r3, r0
 8001c10:	3328      	adds	r3, #40	@ 0x28
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	440b      	add	r3, r1
 8001c16:	1e59      	subs	r1, r3, #1
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4403      	add	r3, r0
 8001c26:	3328      	adds	r3, #40	@ 0x28
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 8470 	beq.w	8002518 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001c38:	78fa      	ldrb	r2, [r7, #3]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	333c      	adds	r3, #60	@ 0x3c
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	f083 0301 	eor.w	r3, r3, #1
 8001c50:	b2d8      	uxtb	r0, r3
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	333c      	adds	r3, #60	@ 0x3c
 8001c60:	4602      	mov	r2, r0
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	f000 bc58 	b.w	8002518 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	333c      	adds	r3, #60	@ 0x3c
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	78fa      	ldrb	r2, [r7, #3]
 8001c7c:	f083 0301 	eor.w	r3, r3, #1
 8001c80:	b2d8      	uxtb	r0, r3
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	333c      	adds	r3, #60	@ 0x3c
 8001c90:	4602      	mov	r2, r0
 8001c92:	701a      	strb	r2, [r3, #0]
 8001c94:	f000 bc40 	b.w	8002518 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	78fa      	ldrb	r2, [r7, #3]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 f8c0 	bl	8004e26 <USB_ReadChInterrupts>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	d131      	bne.n	8001d14 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	015a      	lsls	r2, r3, #5
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	331a      	adds	r3, #26
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	f040 841f 	bne.w	8002518 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001cda:	78fa      	ldrb	r2, [r7, #3]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	331b      	adds	r3, #27
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	334d      	adds	r3, #77	@ 0x4d
 8001cfe:	2203      	movs	r2, #3
 8001d00:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	78fa      	ldrb	r2, [r7, #3]
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f003 f908 	bl	8004f20 <USB_HC_Halt>
 8001d10:	f000 bc02 	b.w	8002518 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 f882 	bl	8004e26 <USB_ReadChInterrupts>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	f040 8305 	bne.w	8002338 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	015a      	lsls	r2, r3, #5
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	334d      	adds	r3, #77	@ 0x4d
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d114      	bne.n	8001d80 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	334d      	adds	r3, #77	@ 0x4d
 8001d66:	2202      	movs	r2, #2
 8001d68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001d6a:	78fa      	ldrb	r2, [r7, #3]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	334c      	adds	r3, #76	@ 0x4c
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	e2cc      	b.n	800231a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	334d      	adds	r3, #77	@ 0x4d
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d114      	bne.n	8001dc0 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d96:	78fa      	ldrb	r2, [r7, #3]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	334d      	adds	r3, #77	@ 0x4d
 8001da6:	2202      	movs	r2, #2
 8001da8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001daa:	78fa      	ldrb	r2, [r7, #3]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	334c      	adds	r3, #76	@ 0x4c
 8001dba:	2205      	movs	r2, #5
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	e2ac      	b.n	800231a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	334d      	adds	r3, #77	@ 0x4d
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b07      	cmp	r3, #7
 8001dd4:	d00b      	beq.n	8001dee <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	334d      	adds	r3, #77	@ 0x4d
 8001de6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	f040 80a6 	bne.w	8001f3a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	334d      	adds	r3, #77	@ 0x4d
 8001dfe:	2202      	movs	r2, #2
 8001e00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001e02:	78fa      	ldrb	r2, [r7, #3]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	3344      	adds	r3, #68	@ 0x44
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	1c59      	adds	r1, r3, #1
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4403      	add	r3, r0
 8001e22:	3344      	adds	r3, #68	@ 0x44
 8001e24:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e26:	78fa      	ldrb	r2, [r7, #3]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	1a9b      	subs	r3, r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	3344      	adds	r3, #68	@ 0x44
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d943      	bls.n	8001ec4 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	3344      	adds	r3, #68	@ 0x44
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	331a      	adds	r3, #26
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d123      	bne.n	8001eae <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	331b      	adds	r3, #27
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	331c      	adds	r3, #28
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	0151      	lsls	r1, r2, #5
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	440a      	add	r2, r1
 8001ea4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eac:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001eae:	78fa      	ldrb	r2, [r7, #3]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	1a9b      	subs	r3, r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	334c      	adds	r3, #76	@ 0x4c
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001ec2:	e229      	b.n	8002318 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	334c      	adds	r3, #76	@ 0x4c
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3326      	adds	r3, #38	@ 0x26
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	3326      	adds	r3, #38	@ 0x26
 8001efe:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	f040 8209 	bne.w	8002318 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001f1c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f24:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001f38:	e1ee      	b.n	8002318 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	334d      	adds	r3, #77	@ 0x4d
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	f040 80c8 	bne.w	80020e2 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f52:	78fa      	ldrb	r2, [r7, #3]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	334d      	adds	r3, #77	@ 0x4d
 8001f62:	2202      	movs	r2, #2
 8001f64:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	331b      	adds	r3, #27
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	f040 81ce 	bne.w	800231a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	1a9b      	subs	r3, r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3326      	adds	r3, #38	@ 0x26
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d16b      	bne.n	800206c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3348      	adds	r3, #72	@ 0x48
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	1c59      	adds	r1, r3, #1
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4403      	add	r3, r0
 8001fb4:	3348      	adds	r3, #72	@ 0x48
 8001fb6:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3348      	adds	r3, #72	@ 0x48
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d943      	bls.n	8002056 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	3348      	adds	r3, #72	@ 0x48
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	331b      	adds	r3, #27
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	3344      	adds	r3, #68	@ 0x44
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d809      	bhi.n	8002020 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	331c      	adds	r3, #28
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	0151      	lsls	r1, r2, #5
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	440a      	add	r2, r1
 8002036:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800203a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800203e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	334c      	adds	r3, #76	@ 0x4c
 8002050:	2204      	movs	r2, #4
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	e014      	b.n	8002080 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	334c      	adds	r3, #76	@ 0x4c
 8002066:	2202      	movs	r2, #2
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e009      	b.n	8002080 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	334c      	adds	r3, #76	@ 0x4c
 800207c:	2202      	movs	r2, #2
 800207e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	3326      	adds	r3, #38	@ 0x26
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3326      	adds	r3, #38	@ 0x26
 80020a6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	f040 8136 	bne.w	800231a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	015a      	lsls	r2, r3, #5
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4413      	add	r3, r2
 80020b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80020c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80020cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020da:	461a      	mov	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	e11b      	b.n	800231a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	334d      	adds	r3, #77	@ 0x4d
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	f040 8081 	bne.w	80021fc <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80020fa:	78fa      	ldrb	r2, [r7, #3]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	334d      	adds	r3, #77	@ 0x4d
 800210a:	2202      	movs	r2, #2
 800210c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	331b      	adds	r3, #27
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	f040 80fa 	bne.w	800231a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	334c      	adds	r3, #76	@ 0x4c
 8002136:	2202      	movs	r2, #2
 8002138:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4413      	add	r3, r2
 8002142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	78fa      	ldrb	r2, [r7, #3]
 800214a:	0151      	lsls	r1, r2, #5
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	440a      	add	r2, r1
 8002150:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002158:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4413      	add	r3, r2
 8002162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	0151      	lsls	r1, r2, #5
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	440a      	add	r2, r1
 8002170:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002178:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	0151      	lsls	r1, r2, #5
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	440a      	add	r2, r1
 8002190:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002194:	f023 0320 	bic.w	r3, r3, #32
 8002198:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	3326      	adds	r3, #38	@ 0x26
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00b      	beq.n	80021c8 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	3326      	adds	r3, #38	@ 0x26
 80021c0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	f040 80a9 	bne.w	800231a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80021de:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80021e6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021f4:	461a      	mov	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e08e      	b.n	800231a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	334d      	adds	r3, #77	@ 0x4d
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b04      	cmp	r3, #4
 8002210:	d143      	bne.n	800229a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	334d      	adds	r3, #77	@ 0x4d
 8002222:	2202      	movs	r2, #2
 8002224:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	334c      	adds	r3, #76	@ 0x4c
 8002236:	2202      	movs	r2, #2
 8002238:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	3326      	adds	r3, #38	@ 0x26
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	3326      	adds	r3, #38	@ 0x26
 8002260:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002262:	2b02      	cmp	r3, #2
 8002264:	d159      	bne.n	800231a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800227c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002284:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	e03f      	b.n	800231a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	334d      	adds	r3, #77	@ 0x4d
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d126      	bne.n	80022fe <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	334d      	adds	r3, #77	@ 0x4d
 80022c0:	2202      	movs	r2, #2
 80022c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	3344      	adds	r3, #68	@ 0x44
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	1c59      	adds	r1, r3, #1
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4403      	add	r3, r0
 80022e4:	3344      	adds	r3, #68	@ 0x44
 80022e6:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	334c      	adds	r3, #76	@ 0x4c
 80022f8:	2204      	movs	r2, #4
 80022fa:	701a      	strb	r2, [r3, #0]
 80022fc:	e00d      	b.n	800231a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80022fe:	78fa      	ldrb	r2, [r7, #3]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	334d      	adds	r3, #77	@ 0x4d
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b02      	cmp	r3, #2
 8002312:	f000 8100 	beq.w	8002516 <HCD_HC_IN_IRQHandler+0xcca>
 8002316:	e000      	b.n	800231a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002318:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	334c      	adds	r3, #76	@ 0x4c
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f003 f870 	bl	8005416 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002336:	e0ef      	b.n	8002518 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f002 fd70 	bl	8004e26 <USB_ReadChInterrupts>
 8002346:	4603      	mov	r3, r0
 8002348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800234c:	2b40      	cmp	r3, #64	@ 0x40
 800234e:	d12f      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800235c:	461a      	mov	r2, r3
 800235e:	2340      	movs	r3, #64	@ 0x40
 8002360:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	334d      	adds	r3, #77	@ 0x4d
 8002372:	2205      	movs	r2, #5
 8002374:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	331a      	adds	r3, #26
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	3344      	adds	r3, #68	@ 0x44
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	78fa      	ldrb	r2, [r7, #3]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f002 fdb9 	bl	8004f20 <USB_HC_Halt>
 80023ae:	e0b3      	b.n	8002518 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 fd34 	bl	8004e26 <USB_ReadChInterrupts>
 80023be:	4603      	mov	r3, r0
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	f040 80a7 	bne.w	8002518 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	3326      	adds	r3, #38	@ 0x26
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d11b      	bne.n	8002418 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	3344      	adds	r3, #68	@ 0x44
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	334d      	adds	r3, #77	@ 0x4d
 8002404:	2204      	movs	r2, #4
 8002406:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f002 fd85 	bl	8004f20 <USB_HC_Halt>
 8002416:	e03f      	b.n	8002498 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	3326      	adds	r3, #38	@ 0x26
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	3326      	adds	r3, #38	@ 0x26
 800243e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002440:	2b02      	cmp	r3, #2
 8002442:	d129      	bne.n	8002498 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	3344      	adds	r3, #68	@ 0x44
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	799b      	ldrb	r3, [r3, #6]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HCD_HC_IN_IRQHandler+0xc2a>
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	331b      	adds	r3, #27
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d110      	bne.n	8002498 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	334d      	adds	r3, #77	@ 0x4d
 8002486:	2204      	movs	r2, #4
 8002488:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f002 fd44 	bl	8004f20 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	331b      	adds	r3, #27
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d129      	bne.n	8002502 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	331b      	adds	r3, #27
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	0151      	lsls	r1, r2, #5
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	440a      	add	r2, r1
 80024d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e0:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	0151      	lsls	r1, r2, #5
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	440a      	add	r2, r1
 80024f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024fc:	f043 0320 	orr.w	r3, r3, #32
 8002500:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4413      	add	r3, r2
 800250a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800250e:	461a      	mov	r2, r3
 8002510:	2310      	movs	r3, #16
 8002512:	6093      	str	r3, [r2, #8]
 8002514:	e000      	b.n	8002518 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002516:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f002 fc72 	bl	8004e26 <USB_ReadChInterrupts>
 8002542:	4603      	mov	r3, r0
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b04      	cmp	r3, #4
 800254a:	d11b      	bne.n	8002584 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002558:	461a      	mov	r2, r3
 800255a:	2304      	movs	r3, #4
 800255c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	334d      	adds	r3, #77	@ 0x4d
 800256e:	2207      	movs	r2, #7
 8002570:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f002 fcd0 	bl	8004f20 <USB_HC_Halt>
 8002580:	f000 bc89 	b.w	8002e96 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f002 fc4a 	bl	8004e26 <USB_ReadChInterrupts>
 8002592:	4603      	mov	r3, r0
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b20      	cmp	r3, #32
 800259a:	f040 8082 	bne.w	80026a2 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025aa:	461a      	mov	r2, r3
 80025ac:	2320      	movs	r3, #32
 80025ae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3319      	adds	r3, #25
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d124      	bne.n	8002610 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80025c6:	78fa      	ldrb	r2, [r7, #3]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	3319      	adds	r3, #25
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025da:	78fa      	ldrb	r2, [r7, #3]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	334c      	adds	r3, #76	@ 0x4c
 80025ea:	2202      	movs	r2, #2
 80025ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	334d      	adds	r3, #77	@ 0x4d
 80025fe:	2203      	movs	r2, #3
 8002600:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	78fa      	ldrb	r2, [r7, #3]
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f002 fc88 	bl	8004f20 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	331a      	adds	r3, #26
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	f040 8437 	bne.w	8002e96 <HCD_HC_OUT_IRQHandler+0x978>
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	331b      	adds	r3, #27
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 842b 	bne.w	8002e96 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3326      	adds	r3, #38	@ 0x26
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d009      	beq.n	800266a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	331b      	adds	r3, #27
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	334d      	adds	r3, #77	@ 0x4d
 800267a:	2203      	movs	r2, #3
 800267c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f002 fc4a 	bl	8004f20 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3344      	adds	r3, #68	@ 0x44
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e3f9      	b.n	8002e96 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f002 fbbb 	bl	8004e26 <USB_ReadChInterrupts>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026ba:	d111      	bne.n	80026e0 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c8:	461a      	mov	r2, r3
 80026ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026ce:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 fc21 	bl	8004f20 <USB_HC_Halt>
 80026de:	e3da      	b.n	8002e96 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f002 fb9c 	bl	8004e26 <USB_ReadChInterrupts>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d168      	bne.n	80027ca <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	3344      	adds	r3, #68	@ 0x44
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f002 fb86 	bl	8004e26 <USB_ReadChInterrupts>
 800271a:	4603      	mov	r3, r0
 800271c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002720:	2b40      	cmp	r3, #64	@ 0x40
 8002722:	d112      	bne.n	800274a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	3319      	adds	r3, #25
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002744:	461a      	mov	r2, r3
 8002746:	2340      	movs	r3, #64	@ 0x40
 8002748:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	331b      	adds	r3, #27
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d019      	beq.n	8002794 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	331b      	adds	r3, #27
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	0151      	lsls	r1, r2, #5
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	440a      	add	r2, r1
 800278a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800278e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002792:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a0:	461a      	mov	r2, r3
 80027a2:	2301      	movs	r3, #1
 80027a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	334d      	adds	r3, #77	@ 0x4d
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 fbac 	bl	8004f20 <USB_HC_Halt>
 80027c8:	e365      	b.n	8002e96 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 fb27 	bl	8004e26 <USB_ReadChInterrupts>
 80027d8:	4603      	mov	r3, r0
 80027da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027de:	2b40      	cmp	r3, #64	@ 0x40
 80027e0:	d139      	bne.n	8002856 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	334d      	adds	r3, #77	@ 0x4d
 80027f2:	2205      	movs	r2, #5
 80027f4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	331a      	adds	r3, #26
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3319      	adds	r3, #25
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	3344      	adds	r3, #68	@ 0x44
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f002 fb6f 	bl	8004f20 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4413      	add	r3, r2
 800284a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800284e:	461a      	mov	r2, r3
 8002850:	2340      	movs	r3, #64	@ 0x40
 8002852:	6093      	str	r3, [r2, #8]
 8002854:	e31f      	b.n	8002e96 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f002 fae1 	bl	8004e26 <USB_ReadChInterrupts>
 8002864:	4603      	mov	r3, r0
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b08      	cmp	r3, #8
 800286c:	d11a      	bne.n	80028a4 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4413      	add	r3, r2
 8002876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800287a:	461a      	mov	r2, r3
 800287c:	2308      	movs	r3, #8
 800287e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	334d      	adds	r3, #77	@ 0x4d
 8002890:	2206      	movs	r2, #6
 8002892:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f002 fb3f 	bl	8004f20 <USB_HC_Halt>
 80028a2:	e2f8      	b.n	8002e96 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f002 faba 	bl	8004e26 <USB_ReadChInterrupts>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d144      	bne.n	8002946 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	3344      	adds	r3, #68	@ 0x44
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	334d      	adds	r3, #77	@ 0x4d
 80028e0:	2204      	movs	r2, #4
 80028e2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	3319      	adds	r3, #25
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d114      	bne.n	8002924 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	3318      	adds	r3, #24
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002910:	78fa      	ldrb	r2, [r7, #3]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	3319      	adds	r3, #25
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f002 faf7 	bl	8004f20 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4413      	add	r3, r2
 800293a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800293e:	461a      	mov	r2, r3
 8002940:	2310      	movs	r3, #16
 8002942:	6093      	str	r3, [r2, #8]
 8002944:	e2a7      	b.n	8002e96 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	4611      	mov	r1, r2
 800294e:	4618      	mov	r0, r3
 8002950:	f002 fa69 	bl	8004e26 <USB_ReadChInterrupts>
 8002954:	4603      	mov	r3, r0
 8002956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295a:	2b80      	cmp	r3, #128	@ 0x80
 800295c:	f040 8083 	bne.w	8002a66 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	799b      	ldrb	r3, [r3, #6]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d111      	bne.n	800298c <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	334d      	adds	r3, #77	@ 0x4d
 8002978:	2207      	movs	r2, #7
 800297a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f002 facb 	bl	8004f20 <USB_HC_Halt>
 800298a:	e062      	b.n	8002a52 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3344      	adds	r3, #68	@ 0x44
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	1c59      	adds	r1, r3, #1
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4403      	add	r3, r0
 80029ac:	3344      	adds	r3, #68	@ 0x44
 80029ae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	3344      	adds	r3, #68	@ 0x44
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d922      	bls.n	8002a0c <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3344      	adds	r3, #68	@ 0x44
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	334c      	adds	r3, #76	@ 0x4c
 80029ea:	2204      	movs	r2, #4
 80029ec:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	334c      	adds	r3, #76	@ 0x4c
 80029fe:	781a      	ldrb	r2, [r3, #0]
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	4619      	mov	r1, r3
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f002 fd06 	bl	8005416 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a0a:	e022      	b.n	8002a52 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	334c      	adds	r3, #76	@ 0x4c
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a36:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a3e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a5e:	461a      	mov	r2, r3
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	6093      	str	r3, [r2, #8]
 8002a64:	e217      	b.n	8002e96 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f002 f9d9 	bl	8004e26 <USB_ReadChInterrupts>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7e:	d11b      	bne.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	334d      	adds	r3, #77	@ 0x4d
 8002a90:	2209      	movs	r2, #9
 8002a92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f002 fa3f 	bl	8004f20 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ab4:	6093      	str	r3, [r2, #8]
 8002ab6:	e1ee      	b.n	8002e96 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 f9b0 	bl	8004e26 <USB_ReadChInterrupts>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	f040 81df 	bne.w	8002e90 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	334d      	adds	r3, #77	@ 0x4d
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	f040 8093 	bne.w	8002c22 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	334d      	adds	r3, #77	@ 0x4d
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	334c      	adds	r3, #76	@ 0x4c
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	3326      	adds	r3, #38	@ 0x26
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d00b      	beq.n	8002b52 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	3326      	adds	r3, #38	@ 0x26
 8002b4a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	f040 8190 	bne.w	8002e72 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	799b      	ldrb	r3, [r3, #6]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d115      	bne.n	8002b86 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	333d      	adds	r3, #61	@ 0x3d
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	f083 0301 	eor.w	r3, r3, #1
 8002b72:	b2d8      	uxtb	r0, r3
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	333d      	adds	r3, #61	@ 0x3d
 8002b82:	4602      	mov	r2, r0
 8002b84:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	799b      	ldrb	r3, [r3, #6]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	f040 8171 	bne.w	8002e72 <HCD_HC_OUT_IRQHandler+0x954>
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3334      	adds	r3, #52	@ 0x34
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8165 	beq.w	8002e72 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3334      	adds	r3, #52	@ 0x34
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4403      	add	r3, r0
 8002bc8:	3328      	adds	r3, #40	@ 0x28
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	440b      	add	r3, r1
 8002bce:	1e59      	subs	r1, r3, #1
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4403      	add	r3, r0
 8002bde:	3328      	adds	r3, #40	@ 0x28
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be6:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 813f 	beq.w	8002e72 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	333d      	adds	r3, #61	@ 0x3d
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	f083 0301 	eor.w	r3, r3, #1
 8002c0c:	b2d8      	uxtb	r0, r3
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	333d      	adds	r3, #61	@ 0x3d
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e127      	b.n	8002e72 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	334d      	adds	r3, #77	@ 0x4d
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d120      	bne.n	8002c7a <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	334d      	adds	r3, #77	@ 0x4d
 8002c48:	2202      	movs	r2, #2
 8002c4a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	331b      	adds	r3, #27
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	f040 8107 	bne.w	8002e72 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	334c      	adds	r3, #76	@ 0x4c
 8002c74:	2202      	movs	r2, #2
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	e0fb      	b.n	8002e72 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	334d      	adds	r3, #77	@ 0x4d
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d13a      	bne.n	8002d06 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	334d      	adds	r3, #77	@ 0x4d
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	334c      	adds	r3, #76	@ 0x4c
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	331b      	adds	r3, #27
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	f040 80d1 	bne.w	8002e72 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	331b      	adds	r3, #27
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	0151      	lsls	r1, r2, #5
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	440a      	add	r2, r1
 8002cfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d02:	6053      	str	r3, [r2, #4]
 8002d04:	e0b5      	b.n	8002e72 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	334d      	adds	r3, #77	@ 0x4d
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d114      	bne.n	8002d46 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	334d      	adds	r3, #77	@ 0x4d
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	334c      	adds	r3, #76	@ 0x4c
 8002d40:	2202      	movs	r2, #2
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	e095      	b.n	8002e72 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	334d      	adds	r3, #77	@ 0x4d
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b06      	cmp	r3, #6
 8002d5a:	d114      	bne.n	8002d86 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	334d      	adds	r3, #77	@ 0x4d
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	334c      	adds	r3, #76	@ 0x4c
 8002d80:	2205      	movs	r2, #5
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e075      	b.n	8002e72 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	334d      	adds	r3, #77	@ 0x4d
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b07      	cmp	r3, #7
 8002d9a:	d00a      	beq.n	8002db2 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	334d      	adds	r3, #77	@ 0x4d
 8002dac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002dae:	2b09      	cmp	r3, #9
 8002db0:	d170      	bne.n	8002e94 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	334d      	adds	r3, #77	@ 0x4d
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3344      	adds	r3, #68	@ 0x44
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	1c59      	adds	r1, r3, #1
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4403      	add	r3, r0
 8002de6:	3344      	adds	r3, #68	@ 0x44
 8002de8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	3344      	adds	r3, #68	@ 0x44
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d914      	bls.n	8002e2a <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3344      	adds	r3, #68	@ 0x44
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	334c      	adds	r3, #76	@ 0x4c
 8002e24:	2204      	movs	r2, #4
 8002e26:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e28:	e022      	b.n	8002e70 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	334c      	adds	r3, #76	@ 0x4c
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e54:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e5c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e70:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	334c      	adds	r3, #76	@ 0x4c
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	4619      	mov	r1, r3
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f002 fac4 	bl	8005416 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e8e:	e002      	b.n	8002e96 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002e90:	bf00      	nop
 8002e92:	e000      	b.n	8002e96 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8002e94:	bf00      	nop
  }
}
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08a      	sub	sp, #40	@ 0x28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	0c5b      	lsrs	r3, r3, #17
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d004      	beq.n	8002ee2 <HCD_RXQLVL_IRQHandler+0x46>
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	f000 80b6 	beq.w	800304c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ee0:	e0b7      	b.n	8003052 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80b3 	beq.w	8003050 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	332c      	adds	r3, #44	@ 0x2c
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a7 	beq.w	8003050 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	3338      	adds	r3, #56	@ 0x38
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	18d1      	adds	r1, r2, r3
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4403      	add	r3, r0
 8002f26:	3334      	adds	r3, #52	@ 0x34
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4299      	cmp	r1, r3
 8002f2c:	f200 8083 	bhi.w	8003036 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	332c      	adds	r3, #44	@ 0x2c
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	b292      	uxth	r2, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f001 ff00 	bl	8004d50 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	332c      	adds	r3, #44	@ 0x2c
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	18d1      	adds	r1, r2, r3
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4403      	add	r3, r0
 8002f74:	332c      	adds	r3, #44	@ 0x2c
 8002f76:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	3338      	adds	r3, #56	@ 0x38
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	18d1      	adds	r1, r2, r3
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4403      	add	r3, r0
 8002f9c:	3338      	adds	r3, #56	@ 0x38
 8002f9e:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	0cdb      	lsrs	r3, r3, #19
 8002fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3328      	adds	r3, #40	@ 0x28
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d13f      	bne.n	8003050 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d03c      	beq.n	8003050 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fec:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ff4:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003002:	461a      	mov	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	333c      	adds	r3, #60	@ 0x3c
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	f083 0301 	eor.w	r3, r3, #1
 800301e:	b2d8      	uxtb	r0, r3
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	333c      	adds	r3, #60	@ 0x3c
 8003030:	4602      	mov	r2, r0
 8003032:	701a      	strb	r2, [r3, #0]
      break;
 8003034:	e00c      	b.n	8003050 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	334c      	adds	r3, #76	@ 0x4c
 8003046:	2204      	movs	r2, #4
 8003048:	701a      	strb	r2, [r3, #0]
      break;
 800304a:	e001      	b.n	8003050 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800304c:	bf00      	nop
 800304e:	e000      	b.n	8003052 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003050:	bf00      	nop
  }
}
 8003052:	bf00      	nop
 8003054:	3728      	adds	r7, #40	@ 0x28
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003086:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b02      	cmp	r3, #2
 8003090:	d10b      	bne.n	80030aa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d102      	bne.n	80030a2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f002 f99e 	bl	80053de <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f043 0302 	orr.w	r3, r3, #2
 80030a8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d132      	bne.n	800311a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f043 0308 	orr.w	r3, r3, #8
 80030ba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d126      	bne.n	8003114 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7a5b      	ldrb	r3, [r3, #9]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d113      	bne.n	80030f6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80030d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030d8:	d106      	bne.n	80030e8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2102      	movs	r1, #2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f001 fecf 	bl	8004e84 <USB_InitFSLSPClkSel>
 80030e6:	e011      	b.n	800310c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2101      	movs	r1, #1
 80030ee:	4618      	mov	r0, r3
 80030f0:	f001 fec8 	bl	8004e84 <USB_InitFSLSPClkSel>
 80030f4:	e00a      	b.n	800310c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	79db      	ldrb	r3, [r3, #7]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d106      	bne.n	800310c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003104:	461a      	mov	r2, r3
 8003106:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800310a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f002 f990 	bl	8005432 <HAL_HCD_PortEnabled_Callback>
 8003112:	e002      	b.n	800311a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f002 f99a 	bl	800544e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b20      	cmp	r3, #32
 8003122:	d103      	bne.n	800312c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f043 0320 	orr.w	r3, r3, #32
 800312a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003132:	461a      	mov	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	6013      	str	r3, [r2, #0]
}
 8003138:	bf00      	nop
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e267      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d075      	beq.n	800324a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800315e:	4b88      	ldr	r3, [pc, #544]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b04      	cmp	r3, #4
 8003168:	d00c      	beq.n	8003184 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316a:	4b85      	ldr	r3, [pc, #532]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003172:	2b08      	cmp	r3, #8
 8003174:	d112      	bne.n	800319c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003176:	4b82      	ldr	r3, [pc, #520]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003182:	d10b      	bne.n	800319c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	4b7e      	ldr	r3, [pc, #504]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d05b      	beq.n	8003248 <HAL_RCC_OscConfig+0x108>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d157      	bne.n	8003248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e242      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a4:	d106      	bne.n	80031b4 <HAL_RCC_OscConfig+0x74>
 80031a6:	4b76      	ldr	r3, [pc, #472]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a75      	ldr	r2, [pc, #468]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e01d      	b.n	80031f0 <HAL_RCC_OscConfig+0xb0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x98>
 80031be:	4b70      	ldr	r3, [pc, #448]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6f      	ldr	r2, [pc, #444]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6c      	ldr	r2, [pc, #432]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e00b      	b.n	80031f0 <HAL_RCC_OscConfig+0xb0>
 80031d8:	4b69      	ldr	r3, [pc, #420]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a68      	ldr	r2, [pc, #416]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4b66      	ldr	r3, [pc, #408]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a65      	ldr	r2, [pc, #404]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fd fe58 	bl	8000eac <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003200:	f7fd fe54 	bl	8000eac <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	@ 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e207      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	4b5b      	ldr	r3, [pc, #364]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0xc0>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fd fe44 	bl	8000eac <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003228:	f7fd fe40 	bl	8000eac <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	@ 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e1f3      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323a:	4b51      	ldr	r3, [pc, #324]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0xe8>
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d063      	beq.n	800331e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003256:	4b4a      	ldr	r3, [pc, #296]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003262:	4b47      	ldr	r3, [pc, #284]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800326a:	2b08      	cmp	r3, #8
 800326c:	d11c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326e:	4b44      	ldr	r3, [pc, #272]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	4b41      	ldr	r3, [pc, #260]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_RCC_OscConfig+0x152>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d001      	beq.n	8003292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e1c7      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003292:	4b3b      	ldr	r3, [pc, #236]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4937      	ldr	r1, [pc, #220]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a6:	e03a      	b.n	800331e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b0:	4b34      	ldr	r3, [pc, #208]	@ (8003384 <HAL_RCC_OscConfig+0x244>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b6:	f7fd fdf9 	bl	8000eac <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032be:	f7fd fdf5 	bl	8000eac <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e1a8      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032dc:	4b28      	ldr	r3, [pc, #160]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4925      	ldr	r1, [pc, #148]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
 80032f0:	e015      	b.n	800331e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f2:	4b24      	ldr	r3, [pc, #144]	@ (8003384 <HAL_RCC_OscConfig+0x244>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fd fdd8 	bl	8000eac <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003300:	f7fd fdd4 	bl	8000eac <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e187      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003312:	4b1b      	ldr	r3, [pc, #108]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d036      	beq.n	8003398 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d016      	beq.n	8003360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003332:	4b15      	ldr	r3, [pc, #84]	@ (8003388 <HAL_RCC_OscConfig+0x248>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fd fdb8 	bl	8000eac <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003340:	f7fd fdb4 	bl	8000eac <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e167      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003352:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x200>
 800335e:	e01b      	b.n	8003398 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003360:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <HAL_RCC_OscConfig+0x248>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003366:	f7fd fda1 	bl	8000eac <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800336c:	e00e      	b.n	800338c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336e:	f7fd fd9d 	bl	8000eac <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d907      	bls.n	800338c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e150      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
 8003380:	40023800 	.word	0x40023800
 8003384:	42470000 	.word	0x42470000
 8003388:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338c:	4b88      	ldr	r3, [pc, #544]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 800338e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ea      	bne.n	800336e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8097 	beq.w	80034d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033aa:	4b81      	ldr	r3, [pc, #516]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10f      	bne.n	80033d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	4b7d      	ldr	r3, [pc, #500]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	4a7c      	ldr	r2, [pc, #496]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80033c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c6:	4b7a      	ldr	r3, [pc, #488]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d2:	2301      	movs	r3, #1
 80033d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d6:	4b77      	ldr	r3, [pc, #476]	@ (80035b4 <HAL_RCC_OscConfig+0x474>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d118      	bne.n	8003414 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e2:	4b74      	ldr	r3, [pc, #464]	@ (80035b4 <HAL_RCC_OscConfig+0x474>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a73      	ldr	r2, [pc, #460]	@ (80035b4 <HAL_RCC_OscConfig+0x474>)
 80033e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ee:	f7fd fd5d 	bl	8000eac <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f6:	f7fd fd59 	bl	8000eac <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e10c      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	4b6a      	ldr	r3, [pc, #424]	@ (80035b4 <HAL_RCC_OscConfig+0x474>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d106      	bne.n	800342a <HAL_RCC_OscConfig+0x2ea>
 800341c:	4b64      	ldr	r3, [pc, #400]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003420:	4a63      	ldr	r2, [pc, #396]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6713      	str	r3, [r2, #112]	@ 0x70
 8003428:	e01c      	b.n	8003464 <HAL_RCC_OscConfig+0x324>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b05      	cmp	r3, #5
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x30c>
 8003432:	4b5f      	ldr	r3, [pc, #380]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003436:	4a5e      	ldr	r2, [pc, #376]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	6713      	str	r3, [r2, #112]	@ 0x70
 800343e:	4b5c      	ldr	r3, [pc, #368]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003442:	4a5b      	ldr	r2, [pc, #364]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6713      	str	r3, [r2, #112]	@ 0x70
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0x324>
 800344c:	4b58      	ldr	r3, [pc, #352]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003450:	4a57      	ldr	r2, [pc, #348]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	6713      	str	r3, [r2, #112]	@ 0x70
 8003458:	4b55      	ldr	r3, [pc, #340]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345c:	4a54      	ldr	r2, [pc, #336]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 800345e:	f023 0304 	bic.w	r3, r3, #4
 8003462:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d015      	beq.n	8003498 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fd fd1e 	bl	8000eac <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003472:	e00a      	b.n	800348a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fd fd1a 	bl	8000eac <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e0cb      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348a:	4b49      	ldr	r3, [pc, #292]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0ee      	beq.n	8003474 <HAL_RCC_OscConfig+0x334>
 8003496:	e014      	b.n	80034c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003498:	f7fd fd08 	bl	8000eac <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fd fd04 	bl	8000eac <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0b5      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b6:	4b3e      	ldr	r3, [pc, #248]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ee      	bne.n	80034a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c8:	4b39      	ldr	r3, [pc, #228]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	4a38      	ldr	r2, [pc, #224]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80a1 	beq.w	8003620 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034de:	4b34      	ldr	r3, [pc, #208]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d05c      	beq.n	80035a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d141      	bne.n	8003576 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f2:	4b31      	ldr	r3, [pc, #196]	@ (80035b8 <HAL_RCC_OscConfig+0x478>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fd fcd8 	bl	8000eac <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003500:	f7fd fcd4 	bl	8000eac <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e087      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	4b27      	ldr	r3, [pc, #156]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	3b01      	subs	r3, #1
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	491b      	ldr	r1, [pc, #108]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003548:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <HAL_RCC_OscConfig+0x478>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fd fcad 	bl	8000eac <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003556:	f7fd fca9 	bl	8000eac <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e05c      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003568:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x416>
 8003574:	e054      	b.n	8003620 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003576:	4b10      	ldr	r3, [pc, #64]	@ (80035b8 <HAL_RCC_OscConfig+0x478>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fd fc96 	bl	8000eac <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003584:	f7fd fc92 	bl	8000eac <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e045      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x444>
 80035a2:	e03d      	b.n	8003620 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e038      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40007000 	.word	0x40007000
 80035b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035bc:	4b1b      	ldr	r3, [pc, #108]	@ (800362c <HAL_RCC_OscConfig+0x4ec>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d028      	beq.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d121      	bne.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d11a      	bne.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035ec:	4013      	ands	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d111      	bne.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	3b01      	subs	r3, #1
 8003606:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d107      	bne.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003616:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800

08003630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0cc      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003644:	4b68      	ldr	r3, [pc, #416]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d90c      	bls.n	800366c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b65      	ldr	r3, [pc, #404]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b63      	ldr	r3, [pc, #396]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0b8      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003684:	4b59      	ldr	r3, [pc, #356]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a58      	ldr	r2, [pc, #352]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800368e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800369c:	4b53      	ldr	r3, [pc, #332]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a52      	ldr	r2, [pc, #328]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a8:	4b50      	ldr	r3, [pc, #320]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	494d      	ldr	r1, [pc, #308]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d044      	beq.n	8003750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ce:	4b47      	ldr	r3, [pc, #284]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d119      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e07f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d003      	beq.n	80036ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ee:	4b3f      	ldr	r3, [pc, #252]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e06f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fe:	4b3b      	ldr	r3, [pc, #236]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e067      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370e:	4b37      	ldr	r3, [pc, #220]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4934      	ldr	r1, [pc, #208]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003720:	f7fd fbc4 	bl	8000eac <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	e00a      	b.n	800373e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003728:	f7fd fbc0 	bl	8000eac <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e04f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	4b2b      	ldr	r3, [pc, #172]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 020c 	and.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	429a      	cmp	r2, r3
 800374e:	d1eb      	bne.n	8003728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003750:	4b25      	ldr	r3, [pc, #148]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d20c      	bcs.n	8003778 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b22      	ldr	r3, [pc, #136]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b20      	ldr	r3, [pc, #128]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e032      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003784:	4b19      	ldr	r3, [pc, #100]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4916      	ldr	r1, [pc, #88]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a2:	4b12      	ldr	r3, [pc, #72]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	490e      	ldr	r1, [pc, #56]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037b6:	f000 f821 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 80037ba:	4602      	mov	r2, r0
 80037bc:	4b0b      	ldr	r3, [pc, #44]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	490a      	ldr	r1, [pc, #40]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 80037c8:	5ccb      	ldrb	r3, [r1, r3]
 80037ca:	fa22 f303 	lsr.w	r3, r2, r3
 80037ce:	4a09      	ldr	r2, [pc, #36]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037d2:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd fb24 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023c00 	.word	0x40023c00
 80037ec:	40023800 	.word	0x40023800
 80037f0:	080056a4 	.word	0x080056a4
 80037f4:	20000000 	.word	0x20000000
 80037f8:	20000004 	.word	0x20000004

080037fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003800:	b094      	sub	sp, #80	@ 0x50
 8003802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003814:	4b79      	ldr	r3, [pc, #484]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b08      	cmp	r3, #8
 800381e:	d00d      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x40>
 8003820:	2b08      	cmp	r3, #8
 8003822:	f200 80e1 	bhi.w	80039e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x34>
 800382a:	2b04      	cmp	r3, #4
 800382c:	d003      	beq.n	8003836 <HAL_RCC_GetSysClockFreq+0x3a>
 800382e:	e0db      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b73      	ldr	r3, [pc, #460]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x204>)
 8003832:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003834:	e0db      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003836:	4b73      	ldr	r3, [pc, #460]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0x208>)
 8003838:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800383a:	e0d8      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800383c:	4b6f      	ldr	r3, [pc, #444]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003844:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003846:	4b6d      	ldr	r3, [pc, #436]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d063      	beq.n	800391a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003852:	4b6a      	ldr	r3, [pc, #424]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	2200      	movs	r2, #0
 800385a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800385c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800385e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003864:	633b      	str	r3, [r7, #48]	@ 0x30
 8003866:	2300      	movs	r3, #0
 8003868:	637b      	str	r3, [r7, #52]	@ 0x34
 800386a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800386e:	4622      	mov	r2, r4
 8003870:	462b      	mov	r3, r5
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f04f 0100 	mov.w	r1, #0
 800387a:	0159      	lsls	r1, r3, #5
 800387c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003880:	0150      	lsls	r0, r2, #5
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4621      	mov	r1, r4
 8003888:	1a51      	subs	r1, r2, r1
 800388a:	6139      	str	r1, [r7, #16]
 800388c:	4629      	mov	r1, r5
 800388e:	eb63 0301 	sbc.w	r3, r3, r1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038a0:	4659      	mov	r1, fp
 80038a2:	018b      	lsls	r3, r1, #6
 80038a4:	4651      	mov	r1, sl
 80038a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038aa:	4651      	mov	r1, sl
 80038ac:	018a      	lsls	r2, r1, #6
 80038ae:	4651      	mov	r1, sl
 80038b0:	ebb2 0801 	subs.w	r8, r2, r1
 80038b4:	4659      	mov	r1, fp
 80038b6:	eb63 0901 	sbc.w	r9, r3, r1
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ce:	4690      	mov	r8, r2
 80038d0:	4699      	mov	r9, r3
 80038d2:	4623      	mov	r3, r4
 80038d4:	eb18 0303 	adds.w	r3, r8, r3
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	462b      	mov	r3, r5
 80038dc:	eb49 0303 	adc.w	r3, r9, r3
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038ee:	4629      	mov	r1, r5
 80038f0:	024b      	lsls	r3, r1, #9
 80038f2:	4621      	mov	r1, r4
 80038f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038f8:	4621      	mov	r1, r4
 80038fa:	024a      	lsls	r2, r1, #9
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003902:	2200      	movs	r2, #0
 8003904:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003906:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003908:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800390c:	f7fc fc6e 	bl	80001ec <__aeabi_uldivmod>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4613      	mov	r3, r2
 8003916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003918:	e058      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391a:	4b38      	ldr	r3, [pc, #224]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	099b      	lsrs	r3, r3, #6
 8003920:	2200      	movs	r2, #0
 8003922:	4618      	mov	r0, r3
 8003924:	4611      	mov	r1, r2
 8003926:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	2300      	movs	r3, #0
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003930:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003934:	4642      	mov	r2, r8
 8003936:	464b      	mov	r3, r9
 8003938:	f04f 0000 	mov.w	r0, #0
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	0159      	lsls	r1, r3, #5
 8003942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003946:	0150      	lsls	r0, r2, #5
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4641      	mov	r1, r8
 800394e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003952:	4649      	mov	r1, r9
 8003954:	eb63 0b01 	sbc.w	fp, r3, r1
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003964:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003968:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800396c:	ebb2 040a 	subs.w	r4, r2, sl
 8003970:	eb63 050b 	sbc.w	r5, r3, fp
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	00eb      	lsls	r3, r5, #3
 800397e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003982:	00e2      	lsls	r2, r4, #3
 8003984:	4614      	mov	r4, r2
 8003986:	461d      	mov	r5, r3
 8003988:	4643      	mov	r3, r8
 800398a:	18e3      	adds	r3, r4, r3
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	464b      	mov	r3, r9
 8003990:	eb45 0303 	adc.w	r3, r5, r3
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039a2:	4629      	mov	r1, r5
 80039a4:	028b      	lsls	r3, r1, #10
 80039a6:	4621      	mov	r1, r4
 80039a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ac:	4621      	mov	r1, r4
 80039ae:	028a      	lsls	r2, r1, #10
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039b6:	2200      	movs	r2, #0
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	61fa      	str	r2, [r7, #28]
 80039bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c0:	f7fc fc14 	bl	80001ec <__aeabi_uldivmod>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4613      	mov	r3, r2
 80039ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	3301      	adds	r3, #1
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80039dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e6:	e002      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3750      	adds	r7, #80	@ 0x50
 80039f4:	46bd      	mov	sp, r7
 80039f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	007a1200 	.word	0x007a1200

08003a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	@ (8003a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000000 	.word	0x20000000

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a24:	f7ff fff0 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a9b      	lsrs	r3, r3, #10
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4903      	ldr	r1, [pc, #12]	@ (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	080056b4 	.word	0x080056b4

08003a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a4c:	f7ff ffdc 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	0b5b      	lsrs	r3, r3, #13
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4903      	ldr	r1, [pc, #12]	@ (8003a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	080056b4 	.word	0x080056b4

08003a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e042      	b.n	8003b08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd f8d0 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2224      	movs	r2, #36	@ 0x24
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fe55 	bl	8004764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	@ 0x28
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d175      	bne.n	8003c1c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_UART_Transmit+0x2c>
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e06e      	b.n	8003c1e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2221      	movs	r2, #33	@ 0x21
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b4e:	f7fd f9ad 	bl	8000eac <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	88fa      	ldrh	r2, [r7, #6]
 8003b5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b68:	d108      	bne.n	8003b7c <HAL_UART_Transmit+0x6c>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d104      	bne.n	8003b7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	e003      	b.n	8003b84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b84:	e02e      	b.n	8003be4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2180      	movs	r1, #128	@ 0x80
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fbb7 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e03a      	b.n	8003c1e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10b      	bne.n	8003bc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	e007      	b.n	8003bd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1cb      	bne.n	8003b86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2140      	movs	r1, #64	@ 0x40
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fb83 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e006      	b.n	8003c1e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e000      	b.n	8003c1e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b08a      	sub	sp, #40	@ 0x28
 8003c2a:	af02      	add	r7, sp, #8
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	603b      	str	r3, [r7, #0]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	f040 8081 	bne.w	8003d4a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_UART_Receive+0x2e>
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e079      	b.n	8003d4c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2222      	movs	r2, #34	@ 0x22
 8003c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c6c:	f7fd f91e 	bl	8000eac <HAL_GetTick>
 8003c70:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	88fa      	ldrh	r2, [r7, #6]
 8003c76:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c86:	d108      	bne.n	8003c9a <HAL_UART_Receive+0x74>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d104      	bne.n	8003c9a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	e003      	b.n	8003ca2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003ca2:	e047      	b.n	8003d34 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2200      	movs	r2, #0
 8003cac:	2120      	movs	r1, #32
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fb28 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e042      	b.n	8003d4c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10c      	bne.n	8003ce6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	e01f      	b.n	8003d26 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cee:	d007      	beq.n	8003d00 <HAL_UART_Receive+0xda>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <HAL_UART_Receive+0xe8>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d106      	bne.n	8003d0e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e008      	b.n	8003d20 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	3301      	adds	r3, #1
 8003d24:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1b2      	bne.n	8003ca4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003d4a:	2302      	movs	r3, #2
  }
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d112      	bne.n	8003d94 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <HAL_UART_Receive_IT+0x26>
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e00b      	b.n	8003d96 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	461a      	mov	r2, r3
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 fb13 	bl	80043b6 <UART_Start_Receive_IT>
 8003d90:	4603      	mov	r3, r0
 8003d92:	e000      	b.n	8003d96 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b0ba      	sub	sp, #232	@ 0xe8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003dde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10f      	bne.n	8003e06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_UART_IRQHandler+0x66>
 8003df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fbf2 	bl	80045e8 <UART_Receive_IT>
      return;
 8003e04:	e25b      	b.n	80042be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80de 	beq.w	8003fcc <HAL_UART_IRQHandler+0x22c>
 8003e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d106      	bne.n	8003e2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e20:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80d1 	beq.w	8003fcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <HAL_UART_IRQHandler+0xae>
 8003e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e46:	f043 0201 	orr.w	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <HAL_UART_IRQHandler+0xd2>
 8003e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d005      	beq.n	8003e72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6a:	f043 0202 	orr.w	r2, r3, #2
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <HAL_UART_IRQHandler+0xf6>
 8003e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8e:	f043 0204 	orr.w	r2, r3, #4
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d011      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x126>
 8003ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebe:	f043 0208 	orr.w	r2, r3, #8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 81f2 	beq.w	80042b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_UART_IRQHandler+0x14e>
 8003edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fb7d 	bl	80045e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef8:	2b40      	cmp	r3, #64	@ 0x40
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_UART_IRQHandler+0x17a>
 8003f12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d04f      	beq.n	8003fba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fa85 	bl	800442a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2a:	2b40      	cmp	r3, #64	@ 0x40
 8003f2c:	d141      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3314      	adds	r3, #20
 8003f56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1d9      	bne.n	8003f2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d013      	beq.n	8003faa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f86:	4a7e      	ldr	r2, [pc, #504]	@ (8004180 <HAL_UART_IRQHandler+0x3e0>)
 8003f88:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fd f93d 	bl	800120e <HAL_DMA_Abort_IT>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d016      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	e00e      	b.n	8003fc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f994 	bl	80042d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e00a      	b.n	8003fc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f990 	bl	80042d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb8:	e006      	b.n	8003fc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f98c 	bl	80042d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003fc6:	e175      	b.n	80042b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc8:	bf00      	nop
    return;
 8003fca:	e173      	b.n	80042b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	f040 814f 	bne.w	8004274 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8148 	beq.w	8004274 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8141 	beq.w	8004274 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004012:	2b40      	cmp	r3, #64	@ 0x40
 8004014:	f040 80b6 	bne.w	8004184 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004024:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8145 	beq.w	80042b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004036:	429a      	cmp	r2, r3
 8004038:	f080 813e 	bcs.w	80042b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004042:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800404e:	f000 8088 	beq.w	8004162 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	330c      	adds	r3, #12
 8004058:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004068:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800406c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004070:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800407e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004082:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800408a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004096:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1d9      	bne.n	8004052 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3314      	adds	r3, #20
 80040a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80040ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3314      	adds	r3, #20
 80040be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80040c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e1      	bne.n	800409e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3314      	adds	r3, #20
 80040e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3314      	adds	r3, #20
 80040fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004100:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004104:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800410c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e3      	bne.n	80040da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004130:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004132:	f023 0310 	bic.w	r3, r3, #16
 8004136:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004144:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004146:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004148:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800414a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800414c:	e841 2300 	strex	r3, r2, [r1]
 8004150:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e3      	bne.n	8004120 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415c:	4618      	mov	r0, r3
 800415e:	f7fc ffe6 	bl	800112e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2202      	movs	r2, #2
 8004166:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004170:	b29b      	uxth	r3, r3
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	b29b      	uxth	r3, r3
 8004176:	4619      	mov	r1, r3
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f8b7 	bl	80042ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800417e:	e09b      	b.n	80042b8 <HAL_UART_IRQHandler+0x518>
 8004180:	080044f1 	.word	0x080044f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800418c:	b29b      	uxth	r3, r3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 808e 	beq.w	80042bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80041a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8089 	beq.w	80042bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	330c      	adds	r3, #12
 80041ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80041ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80041d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e3      	bne.n	80041aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3314      	adds	r3, #20
 80041e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	623b      	str	r3, [r7, #32]
   return(result);
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	f023 0301 	bic.w	r3, r3, #1
 80041f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3314      	adds	r3, #20
 8004202:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004206:	633a      	str	r2, [r7, #48]	@ 0x30
 8004208:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800420c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e3      	bne.n	80041e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	330c      	adds	r3, #12
 800422e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	60fb      	str	r3, [r7, #12]
   return(result);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0310 	bic.w	r3, r3, #16
 800423e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	330c      	adds	r3, #12
 8004248:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800424c:	61fa      	str	r2, [r7, #28]
 800424e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	69b9      	ldr	r1, [r7, #24]
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	617b      	str	r3, [r7, #20]
   return(result);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e3      	bne.n	8004228 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004266:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f83d 	bl	80042ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004272:	e023      	b.n	80042bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <HAL_UART_IRQHandler+0x4f4>
 8004280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f943 	bl	8004518 <UART_Transmit_IT>
    return;
 8004292:	e014      	b.n	80042be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00e      	beq.n	80042be <HAL_UART_IRQHandler+0x51e>
 80042a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f983 	bl	80045b8 <UART_EndTransmit_IT>
    return;
 80042b2:	e004      	b.n	80042be <HAL_UART_IRQHandler+0x51e>
    return;
 80042b4:	bf00      	nop
 80042b6:	e002      	b.n	80042be <HAL_UART_IRQHandler+0x51e>
      return;
 80042b8:	bf00      	nop
 80042ba:	e000      	b.n	80042be <HAL_UART_IRQHandler+0x51e>
      return;
 80042bc:	bf00      	nop
  }
}
 80042be:	37e8      	adds	r7, #232	@ 0xe8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004314:	e03b      	b.n	800438e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d037      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7fc fdc5 	bl	8000eac <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	6a3a      	ldr	r2, [r7, #32]
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <UART_WaitOnFlagUntilTimeout+0x30>
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e03a      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d023      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b80      	cmp	r3, #128	@ 0x80
 800434a:	d020      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x8a>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b40      	cmp	r3, #64	@ 0x40
 8004350:	d01d      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b08      	cmp	r3, #8
 800435e:	d116      	bne.n	800438e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f857 	bl	800442a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2208      	movs	r2, #8
 8004380:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e00f      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4013      	ands	r3, r2
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	429a      	cmp	r2, r3
 800439c:	bf0c      	ite	eq
 800439e:	2301      	moveq	r3, #1
 80043a0:	2300      	movne	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d0b4      	beq.n	8004316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b085      	sub	sp, #20
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	4613      	mov	r3, r2
 80043c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	88fa      	ldrh	r2, [r7, #6]
 80043ce:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	88fa      	ldrh	r2, [r7, #6]
 80043d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2222      	movs	r2, #34	@ 0x22
 80043e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695a      	ldr	r2, [r3, #20]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0220 	orr.w	r2, r2, #32
 800441a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800442a:	b480      	push	{r7}
 800442c:	b095      	sub	sp, #84	@ 0x54
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	330c      	adds	r3, #12
 8004438:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004452:	643a      	str	r2, [r7, #64]	@ 0x40
 8004454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004458:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e5      	bne.n	8004432 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3314      	adds	r3, #20
 800446c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	61fb      	str	r3, [r7, #28]
   return(result);
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3314      	adds	r3, #20
 8004484:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004486:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004488:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800448c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e5      	bne.n	8004466 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d119      	bne.n	80044d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	330c      	adds	r3, #12
 80044a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f023 0310 	bic.w	r3, r3, #16
 80044b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044c2:	61ba      	str	r2, [r7, #24]
 80044c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6979      	ldr	r1, [r7, #20]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	613b      	str	r3, [r7, #16]
   return(result);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e5      	bne.n	80044a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044e4:	bf00      	nop
 80044e6:	3754      	adds	r7, #84	@ 0x54
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff fee4 	bl	80042d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b21      	cmp	r3, #33	@ 0x21
 800452a:	d13e      	bne.n	80045aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004534:	d114      	bne.n	8004560 <UART_Transmit_IT+0x48>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d110      	bne.n	8004560 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004552:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	1c9a      	adds	r2, r3, #2
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	621a      	str	r2, [r3, #32]
 800455e:	e008      	b.n	8004572 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	1c59      	adds	r1, r3, #1
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6211      	str	r1, [r2, #32]
 800456a:	781a      	ldrb	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29b      	uxth	r3, r3
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	4619      	mov	r1, r3
 8004580:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10f      	bne.n	80045a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004594:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e000      	b.n	80045ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045aa:	2302      	movs	r3, #2
  }
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff fe73 	bl	80042c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08c      	sub	sp, #48	@ 0x30
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b22      	cmp	r3, #34	@ 0x22
 80045fa:	f040 80ae 	bne.w	800475a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004606:	d117      	bne.n	8004638 <UART_Receive_IT+0x50>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d113      	bne.n	8004638 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004610:	2300      	movs	r3, #0
 8004612:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004618:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	b29a      	uxth	r2, r3
 8004628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004630:	1c9a      	adds	r2, r3, #2
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	629a      	str	r2, [r3, #40]	@ 0x28
 8004636:	e026      	b.n	8004686 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800464a:	d007      	beq.n	800465c <UART_Receive_IT+0x74>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <UART_Receive_IT+0x82>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d106      	bne.n	800466a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	b2da      	uxtb	r2, r3
 8004664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	e008      	b.n	800467c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004676:	b2da      	uxtb	r2, r3
 8004678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29b      	uxth	r3, r3
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4619      	mov	r1, r3
 8004694:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004696:	2b00      	cmp	r3, #0
 8004698:	d15d      	bne.n	8004756 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0220 	bic.w	r2, r2, #32
 80046a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0201 	bic.w	r2, r2, #1
 80046c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d135      	bne.n	800474c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	330c      	adds	r3, #12
 80046ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	613b      	str	r3, [r7, #16]
   return(result);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f023 0310 	bic.w	r3, r3, #16
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	330c      	adds	r3, #12
 8004704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004706:	623a      	str	r2, [r7, #32]
 8004708:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	69f9      	ldr	r1, [r7, #28]
 800470c:	6a3a      	ldr	r2, [r7, #32]
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	61bb      	str	r3, [r7, #24]
   return(result);
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e5      	bne.n	80046e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2b10      	cmp	r3, #16
 8004726:	d10a      	bne.n	800473e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004742:	4619      	mov	r1, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff fdd1 	bl	80042ec <HAL_UARTEx_RxEventCallback>
 800474a:	e002      	b.n	8004752 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7fc fa25 	bl	8000b9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	e002      	b.n	800475c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	e000      	b.n	800475c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800475a:	2302      	movs	r3, #2
  }
}
 800475c:	4618      	mov	r0, r3
 800475e:	3730      	adds	r7, #48	@ 0x30
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004768:	b0c0      	sub	sp, #256	@ 0x100
 800476a:	af00      	add	r7, sp, #0
 800476c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004780:	68d9      	ldr	r1, [r3, #12]
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	ea40 0301 	orr.w	r3, r0, r1
 800478c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	431a      	orrs	r2, r3
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047bc:	f021 010c 	bic.w	r1, r1, #12
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047ca:	430b      	orrs	r3, r1
 80047cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047de:	6999      	ldr	r1, [r3, #24]
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	ea40 0301 	orr.w	r3, r0, r1
 80047ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b8f      	ldr	r3, [pc, #572]	@ (8004a30 <UART_SetConfig+0x2cc>)
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d005      	beq.n	8004804 <UART_SetConfig+0xa0>
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004a34 <UART_SetConfig+0x2d0>)
 8004800:	429a      	cmp	r2, r3
 8004802:	d104      	bne.n	800480e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004804:	f7ff f920 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8004808:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800480c:	e003      	b.n	8004816 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800480e:	f7ff f907 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8004812:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004820:	f040 810c 	bne.w	8004a3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004828:	2200      	movs	r2, #0
 800482a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800482e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004832:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004836:	4622      	mov	r2, r4
 8004838:	462b      	mov	r3, r5
 800483a:	1891      	adds	r1, r2, r2
 800483c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800483e:	415b      	adcs	r3, r3
 8004840:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004842:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004846:	4621      	mov	r1, r4
 8004848:	eb12 0801 	adds.w	r8, r2, r1
 800484c:	4629      	mov	r1, r5
 800484e:	eb43 0901 	adc.w	r9, r3, r1
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800485e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004866:	4690      	mov	r8, r2
 8004868:	4699      	mov	r9, r3
 800486a:	4623      	mov	r3, r4
 800486c:	eb18 0303 	adds.w	r3, r8, r3
 8004870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004874:	462b      	mov	r3, r5
 8004876:	eb49 0303 	adc.w	r3, r9, r3
 800487a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800487e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800488a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800488e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004892:	460b      	mov	r3, r1
 8004894:	18db      	adds	r3, r3, r3
 8004896:	653b      	str	r3, [r7, #80]	@ 0x50
 8004898:	4613      	mov	r3, r2
 800489a:	eb42 0303 	adc.w	r3, r2, r3
 800489e:	657b      	str	r3, [r7, #84]	@ 0x54
 80048a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048a8:	f7fb fca0 	bl	80001ec <__aeabi_uldivmod>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4b61      	ldr	r3, [pc, #388]	@ (8004a38 <UART_SetConfig+0x2d4>)
 80048b2:	fba3 2302 	umull	r2, r3, r3, r2
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	011c      	lsls	r4, r3, #4
 80048ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048cc:	4642      	mov	r2, r8
 80048ce:	464b      	mov	r3, r9
 80048d0:	1891      	adds	r1, r2, r2
 80048d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048d4:	415b      	adcs	r3, r3
 80048d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048dc:	4641      	mov	r1, r8
 80048de:	eb12 0a01 	adds.w	sl, r2, r1
 80048e2:	4649      	mov	r1, r9
 80048e4:	eb43 0b01 	adc.w	fp, r3, r1
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048fc:	4692      	mov	sl, r2
 80048fe:	469b      	mov	fp, r3
 8004900:	4643      	mov	r3, r8
 8004902:	eb1a 0303 	adds.w	r3, sl, r3
 8004906:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800490a:	464b      	mov	r3, r9
 800490c:	eb4b 0303 	adc.w	r3, fp, r3
 8004910:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004920:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004924:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004928:	460b      	mov	r3, r1
 800492a:	18db      	adds	r3, r3, r3
 800492c:	643b      	str	r3, [r7, #64]	@ 0x40
 800492e:	4613      	mov	r3, r2
 8004930:	eb42 0303 	adc.w	r3, r2, r3
 8004934:	647b      	str	r3, [r7, #68]	@ 0x44
 8004936:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800493a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800493e:	f7fb fc55 	bl	80001ec <__aeabi_uldivmod>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4611      	mov	r1, r2
 8004948:	4b3b      	ldr	r3, [pc, #236]	@ (8004a38 <UART_SetConfig+0x2d4>)
 800494a:	fba3 2301 	umull	r2, r3, r3, r1
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	2264      	movs	r2, #100	@ 0x64
 8004952:	fb02 f303 	mul.w	r3, r2, r3
 8004956:	1acb      	subs	r3, r1, r3
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800495e:	4b36      	ldr	r3, [pc, #216]	@ (8004a38 <UART_SetConfig+0x2d4>)
 8004960:	fba3 2302 	umull	r2, r3, r3, r2
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800496c:	441c      	add	r4, r3
 800496e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004972:	2200      	movs	r2, #0
 8004974:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004978:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800497c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004980:	4642      	mov	r2, r8
 8004982:	464b      	mov	r3, r9
 8004984:	1891      	adds	r1, r2, r2
 8004986:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004988:	415b      	adcs	r3, r3
 800498a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800498c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004990:	4641      	mov	r1, r8
 8004992:	1851      	adds	r1, r2, r1
 8004994:	6339      	str	r1, [r7, #48]	@ 0x30
 8004996:	4649      	mov	r1, r9
 8004998:	414b      	adcs	r3, r1
 800499a:	637b      	str	r3, [r7, #52]	@ 0x34
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049a8:	4659      	mov	r1, fp
 80049aa:	00cb      	lsls	r3, r1, #3
 80049ac:	4651      	mov	r1, sl
 80049ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b2:	4651      	mov	r1, sl
 80049b4:	00ca      	lsls	r2, r1, #3
 80049b6:	4610      	mov	r0, r2
 80049b8:	4619      	mov	r1, r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	4642      	mov	r2, r8
 80049be:	189b      	adds	r3, r3, r2
 80049c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049c4:	464b      	mov	r3, r9
 80049c6:	460a      	mov	r2, r1
 80049c8:	eb42 0303 	adc.w	r3, r2, r3
 80049cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049e4:	460b      	mov	r3, r1
 80049e6:	18db      	adds	r3, r3, r3
 80049e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ea:	4613      	mov	r3, r2
 80049ec:	eb42 0303 	adc.w	r3, r2, r3
 80049f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80049fa:	f7fb fbf7 	bl	80001ec <__aeabi_uldivmod>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4b0d      	ldr	r3, [pc, #52]	@ (8004a38 <UART_SetConfig+0x2d4>)
 8004a04:	fba3 1302 	umull	r1, r3, r3, r2
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	2164      	movs	r1, #100	@ 0x64
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	3332      	adds	r3, #50	@ 0x32
 8004a16:	4a08      	ldr	r2, [pc, #32]	@ (8004a38 <UART_SetConfig+0x2d4>)
 8004a18:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	f003 0207 	and.w	r2, r3, #7
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4422      	add	r2, r4
 8004a2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a2c:	e106      	b.n	8004c3c <UART_SetConfig+0x4d8>
 8004a2e:	bf00      	nop
 8004a30:	40011000 	.word	0x40011000
 8004a34:	40011400 	.word	0x40011400
 8004a38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a4e:	4642      	mov	r2, r8
 8004a50:	464b      	mov	r3, r9
 8004a52:	1891      	adds	r1, r2, r2
 8004a54:	6239      	str	r1, [r7, #32]
 8004a56:	415b      	adcs	r3, r3
 8004a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a5e:	4641      	mov	r1, r8
 8004a60:	1854      	adds	r4, r2, r1
 8004a62:	4649      	mov	r1, r9
 8004a64:	eb43 0501 	adc.w	r5, r3, r1
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	00eb      	lsls	r3, r5, #3
 8004a72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a76:	00e2      	lsls	r2, r4, #3
 8004a78:	4614      	mov	r4, r2
 8004a7a:	461d      	mov	r5, r3
 8004a7c:	4643      	mov	r3, r8
 8004a7e:	18e3      	adds	r3, r4, r3
 8004a80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a84:	464b      	mov	r3, r9
 8004a86:	eb45 0303 	adc.w	r3, r5, r3
 8004a8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004aaa:	4629      	mov	r1, r5
 8004aac:	008b      	lsls	r3, r1, #2
 8004aae:	4621      	mov	r1, r4
 8004ab0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	008a      	lsls	r2, r1, #2
 8004ab8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004abc:	f7fb fb96 	bl	80001ec <__aeabi_uldivmod>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4b60      	ldr	r3, [pc, #384]	@ (8004c48 <UART_SetConfig+0x4e4>)
 8004ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	011c      	lsls	r4, r3, #4
 8004ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ad8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004adc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	1891      	adds	r1, r2, r2
 8004ae6:	61b9      	str	r1, [r7, #24]
 8004ae8:	415b      	adcs	r3, r3
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af0:	4641      	mov	r1, r8
 8004af2:	1851      	adds	r1, r2, r1
 8004af4:	6139      	str	r1, [r7, #16]
 8004af6:	4649      	mov	r1, r9
 8004af8:	414b      	adcs	r3, r1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b08:	4659      	mov	r1, fp
 8004b0a:	00cb      	lsls	r3, r1, #3
 8004b0c:	4651      	mov	r1, sl
 8004b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b12:	4651      	mov	r1, sl
 8004b14:	00ca      	lsls	r2, r1, #3
 8004b16:	4610      	mov	r0, r2
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	189b      	adds	r3, r3, r2
 8004b20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b24:	464b      	mov	r3, r9
 8004b26:	460a      	mov	r2, r1
 8004b28:	eb42 0303 	adc.w	r3, r2, r3
 8004b2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b48:	4649      	mov	r1, r9
 8004b4a:	008b      	lsls	r3, r1, #2
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b52:	4641      	mov	r1, r8
 8004b54:	008a      	lsls	r2, r1, #2
 8004b56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b5a:	f7fb fb47 	bl	80001ec <__aeabi_uldivmod>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	4b38      	ldr	r3, [pc, #224]	@ (8004c48 <UART_SetConfig+0x4e4>)
 8004b66:	fba3 2301 	umull	r2, r3, r3, r1
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	2264      	movs	r2, #100	@ 0x64
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	1acb      	subs	r3, r1, r3
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	3332      	adds	r3, #50	@ 0x32
 8004b78:	4a33      	ldr	r2, [pc, #204]	@ (8004c48 <UART_SetConfig+0x4e4>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b84:	441c      	add	r4, r3
 8004b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b94:	4642      	mov	r2, r8
 8004b96:	464b      	mov	r3, r9
 8004b98:	1891      	adds	r1, r2, r2
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	415b      	adcs	r3, r3
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	1851      	adds	r1, r2, r1
 8004ba8:	6039      	str	r1, [r7, #0]
 8004baa:	4649      	mov	r1, r9
 8004bac:	414b      	adcs	r3, r1
 8004bae:	607b      	str	r3, [r7, #4]
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bbc:	4659      	mov	r1, fp
 8004bbe:	00cb      	lsls	r3, r1, #3
 8004bc0:	4651      	mov	r1, sl
 8004bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bc6:	4651      	mov	r1, sl
 8004bc8:	00ca      	lsls	r2, r1, #3
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	189b      	adds	r3, r3, r2
 8004bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	460a      	mov	r2, r1
 8004bda:	eb42 0303 	adc.w	r3, r2, r3
 8004bde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bea:	667a      	str	r2, [r7, #100]	@ 0x64
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	008b      	lsls	r3, r1, #2
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c02:	4641      	mov	r1, r8
 8004c04:	008a      	lsls	r2, r1, #2
 8004c06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c0a:	f7fb faef 	bl	80001ec <__aeabi_uldivmod>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4b0d      	ldr	r3, [pc, #52]	@ (8004c48 <UART_SetConfig+0x4e4>)
 8004c14:	fba3 1302 	umull	r1, r3, r3, r2
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	2164      	movs	r1, #100	@ 0x64
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	3332      	adds	r3, #50	@ 0x32
 8004c26:	4a08      	ldr	r2, [pc, #32]	@ (8004c48 <UART_SetConfig+0x4e4>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	f003 020f 	and.w	r2, r3, #15
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4422      	add	r2, r4
 8004c3a:	609a      	str	r2, [r3, #8]
}
 8004c3c:	bf00      	nop
 8004c3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c42:	46bd      	mov	sp, r7
 8004c44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c48:	51eb851f 	.word	0x51eb851f

08004c4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f043 0201 	orr.w	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f023 0201 	bic.w	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004caa:	d901      	bls.n	8004cb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e01b      	b.n	8004ce8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	daf2      	bge.n	8004c9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	019b      	lsls	r3, r3, #6
 8004cc0:	f043 0220 	orr.w	r2, r3, #32
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cd4:	d901      	bls.n	8004cda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e006      	b.n	8004ce8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d0f0      	beq.n	8004cc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3301      	adds	r3, #1
 8004d04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d0c:	d901      	bls.n	8004d12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e018      	b.n	8004d44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	daf2      	bge.n	8004d00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2210      	movs	r2, #16
 8004d22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3301      	adds	r3, #1
 8004d28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d30:	d901      	bls.n	8004d36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e006      	b.n	8004d44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	2b10      	cmp	r3, #16
 8004d40:	d0f0      	beq.n	8004d24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b08b      	sub	sp, #44	@ 0x2c
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	089b      	lsrs	r3, r3, #2
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d76:	2300      	movs	r3, #0
 8004d78:	623b      	str	r3, [r7, #32]
 8004d7a:	e014      	b.n	8004da6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d86:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	3301      	adds	r3, #1
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	3301      	adds	r3, #1
 8004d98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	3301      	adds	r3, #1
 8004da4:	623b      	str	r3, [r7, #32]
 8004da6:	6a3a      	ldr	r2, [r7, #32]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d3e6      	bcc.n	8004d7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004dae:	8bfb      	ldrh	r3, [r7, #30]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01e      	beq.n	8004df2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f107 0310 	add.w	r3, r7, #16
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	701a      	strb	r2, [r3, #0]
      i++;
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	623b      	str	r3, [r7, #32]
      pDest++;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	3301      	adds	r3, #1
 8004de4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004de6:	8bfb      	ldrh	r3, [r7, #30]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004dec:	8bfb      	ldrh	r3, [r7, #30]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1ea      	bne.n	8004dc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	372c      	adds	r7, #44	@ 0x2c
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4013      	ands	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e18:	68fb      	ldr	r3, [r7, #12]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b085      	sub	sp, #20
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004e36:	78fb      	ldrb	r3, [r7, #3]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	4013      	ands	r3, r2
 8004e58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f003 0301 	and.w	r3, r3, #1
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	68f9      	ldr	r1, [r7, #12]
 8004eb8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d107      	bne.n	8004ed6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ecc:	461a      	mov	r2, r3
 8004ece:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004ed2:	6053      	str	r3, [r2, #4]
 8004ed4:	e00c      	b.n	8004ef0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d107      	bne.n	8004eec <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004ee8:	6053      	str	r3, [r2, #4]
 8004eea:	e001      	b.n	8004ef0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b085      	sub	sp, #20
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	b29b      	uxth	r3, r3
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b089      	sub	sp, #36	@ 0x24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	0c9b      	lsrs	r3, r3, #18
 8004f48:	f003 0303 	and.w	r3, r3, #3
 8004f4c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	0fdb      	lsrs	r3, r3, #31
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	0fdb      	lsrs	r3, r3, #31
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d10d      	bne.n	8004fa2 <USB_HC_Halt+0x82>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <USB_HC_Halt+0x82>
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d002      	beq.n	8004f9e <USB_HC_Halt+0x7e>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d101      	bne.n	8004fa2 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e0d8      	b.n	8005154 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <USB_HC_Halt+0x8e>
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d173      	bne.n	8005096 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	0151      	lsls	r1, r2, #5
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	440a      	add	r2, r1
 8004fc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fcc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d14a      	bne.n	8005070 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fde:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d133      	bne.n	800504e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	0151      	lsls	r1, r2, #5
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	440a      	add	r2, r1
 8004ffc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005004:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	440a      	add	r2, r1
 800501c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005020:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005024:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	3301      	adds	r3, #1
 800502a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005032:	d82e      	bhi.n	8005092 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	4413      	add	r3, r2
 800503c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005046:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800504a:	d0ec      	beq.n	8005026 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800504c:	e081      	b.n	8005152 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	0151      	lsls	r1, r2, #5
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	440a      	add	r2, r1
 8005064:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005068:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800506c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800506e:	e070      	b.n	8005152 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	4413      	add	r3, r2
 8005078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	0151      	lsls	r1, r2, #5
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	440a      	add	r2, r1
 8005086:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800508a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800508e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005090:	e05f      	b.n	8005152 <USB_HC_Halt+0x232>
            break;
 8005092:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005094:	e05d      	b.n	8005152 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	4413      	add	r3, r2
 800509e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050b4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d133      	bne.n	800512e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	0151      	lsls	r1, r2, #5
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	440a      	add	r2, r1
 80050dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050e4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	0151      	lsls	r1, r2, #5
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	440a      	add	r2, r1
 80050fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005100:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005104:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	3301      	adds	r3, #1
 800510a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005112:	d81d      	bhi.n	8005150 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	4413      	add	r3, r2
 800511c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005126:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800512a:	d0ec      	beq.n	8005106 <USB_HC_Halt+0x1e6>
 800512c:	e011      	b.n	8005152 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	440a      	add	r2, r1
 8005144:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005148:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	e000      	b.n	8005152 <USB_HC_Halt+0x232>
          break;
 8005150:	bf00      	nop
    }
  }

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3724      	adds	r7, #36	@ 0x24
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff fd7a 	bl	8004c6e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800517a:	2110      	movs	r1, #16
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fd87 	bl	8004c90 <USB_FlushTxFifo>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff fdb1 	bl	8004cf4 <USB_FlushRxFifo>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800519c:	2300      	movs	r3, #0
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	e01f      	b.n	80051e2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80051c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051d6:	461a      	mov	r2, r3
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	3301      	adds	r3, #1
 80051e0:	61bb      	str	r3, [r7, #24]
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b0f      	cmp	r3, #15
 80051e6:	d9dc      	bls.n	80051a2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80051e8:	2300      	movs	r3, #0
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	e034      	b.n	8005258 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005204:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800520c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005214:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	4413      	add	r3, r2
 800521e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005222:	461a      	mov	r2, r3
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3301      	adds	r3, #1
 800522c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005234:	d80c      	bhi.n	8005250 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	4413      	add	r3, r2
 800523e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005248:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800524c:	d0ec      	beq.n	8005228 <USB_StopHost+0xc8>
 800524e:	e000      	b.n	8005252 <USB_StopHost+0xf2>
        break;
 8005250:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	3301      	adds	r3, #1
 8005256:	61bb      	str	r3, [r7, #24]
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b0f      	cmp	r3, #15
 800525c:	d9c7      	bls.n	80051ee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005264:	461a      	mov	r2, r3
 8005266:	f04f 33ff 	mov.w	r3, #4294967295
 800526a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f04f 32ff 	mov.w	r2, #4294967295
 8005272:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff fce9 	bl	8004c4c <USB_EnableGlobalInt>

  return ret;
 800527a:	7ffb      	ldrb	r3, [r7, #31]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f804 	bl	80052a8 <USBH_HandleSof>
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b0b      	cmp	r3, #11
 80052b8:	d10a      	bne.n	80052d0 <USBH_HandleSof+0x28>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	4798      	blx	r3
  }
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80052e8:	bf00      	nop
}
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8005304:	bf00      	nop
}
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f883 	bl	800546a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	791b      	ldrb	r3, [r3, #4]
 8005368:	4619      	mov	r1, r3
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f80b 	bl	8005386 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	795b      	ldrb	r3, [r3, #5]
 8005374:	4619      	mov	r1, r3
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f805 	bl	8005386 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	2b0f      	cmp	r3, #15
 8005396:	d80d      	bhi.n	80053b4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8005398:	78fb      	ldrb	r3, [r7, #3]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	33e0      	adds	r3, #224	@ 0xe0
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	33e0      	adds	r3, #224	@ 0xe0
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b082      	sub	sp, #8
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff ff57 	bl	8005284 <USBH_LL_IncTimer>
}
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b082      	sub	sp, #8
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff ff8f 	bl	8005310 <USBH_LL_Connect>
}
 80053f2:	bf00      	nop
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff ff98 	bl	800533e <USBH_LL_Disconnect>
}
 800540e:	bf00      	nop
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	460b      	mov	r3, r1
 8005420:	70fb      	strb	r3, [r7, #3]
 8005422:	4613      	mov	r3, r2
 8005424:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff ff49 	bl	80052d8 <USBH_LL_PortEnabled>
}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff ff49 	bl	80052f4 <USBH_LL_PortDisabled>
}
 8005462:	bf00      	nop
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8005480:	4618      	mov	r0, r3
 8005482:	f7fc f9c6 	bl	8001812 <HAL_HCD_Stop>
 8005486:	4603      	mov	r3, r0
 8005488:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800548a:	7bfb      	ldrb	r3, [r7, #15]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 f807 	bl	80054a0 <USBH_Get_USB_Status>
 8005492:	4603      	mov	r3, r0
 8005494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005496:	7bbb      	ldrb	r3, [r7, #14]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d817      	bhi.n	80054e4 <USBH_Get_USB_Status+0x44>
 80054b4:	a201      	add	r2, pc, #4	@ (adr r2, 80054bc <USBH_Get_USB_Status+0x1c>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054cd 	.word	0x080054cd
 80054c0:	080054d3 	.word	0x080054d3
 80054c4:	080054d9 	.word	0x080054d9
 80054c8:	080054df 	.word	0x080054df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	73fb      	strb	r3, [r7, #15]
    break;
 80054d0:	e00b      	b.n	80054ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80054d2:	2302      	movs	r3, #2
 80054d4:	73fb      	strb	r3, [r7, #15]
    break;
 80054d6:	e008      	b.n	80054ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]
    break;
 80054dc:	e005      	b.n	80054ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80054de:	2302      	movs	r3, #2
 80054e0:	73fb      	strb	r3, [r7, #15]
    break;
 80054e2:	e002      	b.n	80054ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80054e4:	2302      	movs	r3, #2
 80054e6:	73fb      	strb	r3, [r7, #15]
    break;
 80054e8:	bf00      	nop
  }
  return usb_status;
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <memset>:
 80054f8:	4402      	add	r2, r0
 80054fa:	4603      	mov	r3, r0
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d100      	bne.n	8005502 <memset+0xa>
 8005500:	4770      	bx	lr
 8005502:	f803 1b01 	strb.w	r1, [r3], #1
 8005506:	e7f9      	b.n	80054fc <memset+0x4>

08005508 <__libc_init_array>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	4d0d      	ldr	r5, [pc, #52]	@ (8005540 <__libc_init_array+0x38>)
 800550c:	4c0d      	ldr	r4, [pc, #52]	@ (8005544 <__libc_init_array+0x3c>)
 800550e:	1b64      	subs	r4, r4, r5
 8005510:	10a4      	asrs	r4, r4, #2
 8005512:	2600      	movs	r6, #0
 8005514:	42a6      	cmp	r6, r4
 8005516:	d109      	bne.n	800552c <__libc_init_array+0x24>
 8005518:	4d0b      	ldr	r5, [pc, #44]	@ (8005548 <__libc_init_array+0x40>)
 800551a:	4c0c      	ldr	r4, [pc, #48]	@ (800554c <__libc_init_array+0x44>)
 800551c:	f000 f818 	bl	8005550 <_init>
 8005520:	1b64      	subs	r4, r4, r5
 8005522:	10a4      	asrs	r4, r4, #2
 8005524:	2600      	movs	r6, #0
 8005526:	42a6      	cmp	r6, r4
 8005528:	d105      	bne.n	8005536 <__libc_init_array+0x2e>
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005530:	4798      	blx	r3
 8005532:	3601      	adds	r6, #1
 8005534:	e7ee      	b.n	8005514 <__libc_init_array+0xc>
 8005536:	f855 3b04 	ldr.w	r3, [r5], #4
 800553a:	4798      	blx	r3
 800553c:	3601      	adds	r6, #1
 800553e:	e7f2      	b.n	8005526 <__libc_init_array+0x1e>
 8005540:	080056c4 	.word	0x080056c4
 8005544:	080056c4 	.word	0x080056c4
 8005548:	080056c4 	.word	0x080056c4
 800554c:	080056c8 	.word	0x080056c8

08005550 <_init>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	bf00      	nop
 8005554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005556:	bc08      	pop	{r3}
 8005558:	469e      	mov	lr, r3
 800555a:	4770      	bx	lr

0800555c <_fini>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	bf00      	nop
 8005560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005562:	bc08      	pop	{r3}
 8005564:	469e      	mov	lr, r3
 8005566:	4770      	bx	lr
